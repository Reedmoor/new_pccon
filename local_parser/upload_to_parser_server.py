#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Docker –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç API endpoints –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä–∞
"""

import os
import sys
import json
import logging
import requests
import argparse
from pathlib import Path
from datetime import datetime
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('upload_to_parser_server')

class ParserServerUploader:
    def __init__(self, parser_server_url="http://127.0.0.1:5000"):
        """
        –ó–∞–≥—Ä—É–∑—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä
        
        Args:
            parser_server_url: URL –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä–∞ Docker
        """
        self.parser_server_url = parser_server_url.rstrip('/')
        self.session = requests.Session()
        
        logger.info(f"Parser Server Uploader initialized")
        logger.info(f"Target parser server: {self.parser_server_url}")
    
    def test_parser_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            logger.info(f"Testing connection to parser server: {self.parser_server_url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä–∞
            response = self.session.get(f"{self.parser_server_url}/health", timeout=10)
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ Parser server connection successful: {result.get('service', 'unknown')}")
                return True
            else:
                logger.error(f"‚ùå Parser server returned status {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Failed to connect to parser server: {e}")
            return False
    
    def get_parser_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Å–µ—Ä–æ–≤"""
        try:
            response = self.session.get(f"{self.parser_server_url}/status", timeout=10)
            
            if response.status_code == 200:
                return response.json()
            else:
                logger.error(f"Failed to get parser status: {response.status_code}")
                return {}
                
        except requests.exceptions.RequestException as e:
            logger.error(f"Error getting parser status: {e}")
            return {}
    
    def detect_category(self, products: List[Dict]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤"""
        if not products:
            return "unknown"
        
        first_product = products[0]
        categories = first_product.get('categories', [])
        
        for category in reversed(categories):
            name = category.get('name', '').strip()
            if name and name not in ['–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ü–ö', '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ü–ö']:
                return name
        
        if categories:
            return categories[-1].get('name', 'unknown')
        
        return "unknown"
    
    def send_dns_data(self, products: List[Dict], category: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ DNS API –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            logger.info(f"üöÄ Sending {len(products)} products from {category} to DNS API...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è DNS API
            payload = {
                'category': category,
                'products': products,
                'source': 'local_old_dns_parser',
                'timestamp': datetime.now().isoformat(),
                'product_count': len(products)
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ DNS API –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä–∞
            response = self.session.post(
                f"{self.parser_server_url}/parse/dns",
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=120
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ Successfully sent data via DNS API: {result.get('message')}")
                return True
            else:
                logger.error(f"‚ùå DNS API returned status {response.status_code}")
                logger.error(f"   Response: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Failed to send data via DNS API: {e}")
            return False
    
    def upload_file(self, file_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ –ø–∞—Ä—Å–µ—Ä-—Å–µ—Ä–≤–µ—Ä"""
        try:
            file_path = Path(file_path)
            
            if not file_path.exists():
                logger.error(f"‚ùå File not found: {file_path}")
                return False
            
            logger.info(f"üìÅ Reading file: {file_path.name}")
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            products = data.get('products', []) if isinstance(data, dict) else data
            
            if not products:
                logger.error(f"‚ùå No products found in {file_path.name}")
                return False
            
            category = self.detect_category(products)
            
            logger.info(f"üìä File info:")
            logger.info(f"   Products: {len(products):,}")
            logger.info(f"   Category: {category}")
            logger.info(f"   Size: {file_path.stat().st_size / 1024:.1f} KB")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ DNS API
            return self.send_dns_data(products, category)
                
        except Exception as e:
            logger.error(f"‚ùå Failed to upload file: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Upload data to Docker parser server')
    parser.add_argument('--parser-url', type=str, default='http://127.0.0.1:5000',
                       help='Parser server URL (default: http://127.0.0.1:5000)')
    parser.add_argument('--data-file', type=str, required=True,
                       help='Path to data file to upload')
    parser.add_argument('--test-connection', action='store_true',
                       help='Test connection to parser server only')
    parser.add_argument('--status', action='store_true',
                       help='Show parser status only')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    uploader = ParserServerUploader(parser_server_url=args.parser_url)
    
    try:
        if args.test_connection:
            if uploader.test_parser_connection():
                logger.info("‚úÖ Parser server connection test successful")
                return 0
            else:
                logger.error("‚ùå Parser server connection test failed")
                return 1
        
        if args.status:
            status = uploader.get_parser_status()
            if status:
                logger.info(f"üìä Parser status: {status}")
                return 0
            else:
                logger.error("‚ùå Failed to get parser status")
                return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        if not uploader.test_parser_connection():
            logger.error("‚ùå Cannot connect to parser server, aborting upload")
            return 1
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–æ–≤
        status = uploader.get_parser_status()
        if status:
            logger.info(f"üìä Available parsers: {status.get('parsers', {})}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        if uploader.upload_file(args.data_file):
            logger.info("‚úÖ File upload completed successfully!")
            return 0
        else:
            logger.error("‚ùå File upload failed")
            return 1
    
    except KeyboardInterrupt:
        logger.info("Operation interrupted by user")
        return 1
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return 1


if __name__ == '__main__':
    exit(main()) 