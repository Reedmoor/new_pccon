#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Docker —Å–µ—Ä–≤–µ—Ä–µ
"""

import requests
import json
from datetime import datetime

def check_docker_server():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–µ—Ä–∞"""
    server_url = "https://pcconf.ru"
    
    print("üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"   URL: {server_url}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        response = requests.get(f"{server_url}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Docker —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            print(f"   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {data.get('timestamp', 'unknown')}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {data.get('product_count', 'unknown')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
            try:
                api_response = requests.get(f"{server_url}/api/parser-status", timeout=10)
                if api_response.status_code == 200:
                    print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
                    api_data = api_response.json()
                    if 'recent_uploads' in api_data:
                        uploads = api_data['recent_uploads']
                        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫: {len(uploads)}")
                        if uploads:
                            latest = uploads[0]
                            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–≥—Ä—É–∑–∫–∞: {latest.get('filename', 'unknown')}")
                            print(f"   –¢–æ–≤–∞—Ä–æ–≤: {latest.get('product_count', 'unknown')}")
                else:
                    print(f"‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {api_response.status_code})")
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {e}")
            
            return True
        else:
            print(f"‚ùå Docker —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def check_web_interface():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = requests.get("https://pcconf.ru", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
            print("   https://pcconf.ru")
            print("   –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:")
            print("   https://pcconf.ru/api/parser-status")
            return True
        else:
            print(f"‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥ {response.status_code})")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        return False

def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_url = "https://pcconf.ru"
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    print(f"   URL: {server_url}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        response = requests.get(f"{server_url}/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            print(f"   –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
            print(f"   –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {data.get('timestamp', 'unknown')}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {data.get('product_count', 'unknown')}")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

if __name__ == "__main__":
    check_docker_server()
    check_web_interface()
    
    print("\n" + "=" * 50)
    print("üéØ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±—Ä–∞—É–∑–µ—Ä–µ:")
    print("   http://127.0.0.1:5000")
    print("\nüìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ API:")
    print("   http://127.0.0.1:5000/api/parser-status") 