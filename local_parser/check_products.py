#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import json
from datetime import datetime

def check_products_on_server(server_url="http://127.0.0.1:5001"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {server_url}")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤
        response = requests.get(f"{server_url}/api/export-products", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            products = data.get('products', [])
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(products):,}")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {}
            for product in products:
                category = product.get('product_type', 'unknown')
                if category not in categories:
                    categories[category] = []
                categories[category].append(product)
            
            print(f"\nüìä –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, items in categories.items():
                print(f"   ‚Ä¢ {category}: {len(items):,} —Ç–æ–≤–∞—Ä–æ–≤")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
                if len(items) > 0:
                    print(f"     –ü—Ä–∏–º–µ—Ä—ã:")
                    for i, item in enumerate(items[:3]):
                        name = item.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                        price = item.get('price_discounted', 0)
                        print(f"       {i+1}. {name} - {price}‚ÇΩ")
                    if len(items) > 3:
                        print(f"       ... –∏ –µ—â–µ {len(items) - 3} —Ç–æ–≤–∞—Ä–æ–≤")
                print()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            print(f"üïí –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
            recent_products = sorted(products, key=lambda x: x.get('id', 0), reverse=True)[:5]
            for i, product in enumerate(recent_products, 1):
                name = product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                category = product.get('product_type', 'unknown')
                price = product.get('price_discounted', 0)
                print(f"   {i}. {name} ({category}) - {price}‚ÇΩ")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    print("\n" + "=" * 60)
    print(f"üí° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
    print(f"   ‚Ä¢ –°–µ—Ä–≤–µ—Ä 5001: {server_url}/admin")
    print(f"   ‚Ä¢ Docker 5000: http://127.0.0.1:5000/admin")

def check_recent_uploads(server_url="http://127.0.0.1:5001"):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–≥—Ä—É–∑–æ–∫"""
    print(f"\nüì§ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ {server_url}:")
    print("-" * 40)
    
    try:
        response = requests.get(f"{server_url}/api/parser-status", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            uploads = data.get('recent_uploads', [])
            
            if uploads:
                for i, upload in enumerate(uploads, 1):
                    filename = upload.get('filename', 'unknown')
                    count = upload.get('product_count', 0)
                    time = upload.get('upload_time', 'unknown')
                    size_mb = upload.get('file_size', 0) / 1024 / 1024
                    
                    print(f"   {i}. {filename}")
                    print(f"      –¢–æ–≤–∞—Ä–æ–≤: {count:,}, –†–∞–∑–º–µ—Ä: {size_mb:.1f} MB")
                    print(f"      –í—Ä–µ–º—è: {time}")
                    print()
            else:
                print("   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≥—Ä—É–∑–∫–∞—Ö")
                
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üîç –ü–†–û–í–ï–†–ö–ê –¢–û–í–ê–†–û–í –í –ë–ê–ó–ï –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä—ã
    check_products_on_server()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    check_recent_uploads() 