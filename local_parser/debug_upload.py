#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
"""

import requests
import json

def debug_product_upload():
    """–û—Ç–ª–∞–¥–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞ ARDOR GAMING Rare M6"""
    print("üîç –û–¢–õ–ê–î–ö–ê –ó–ê–ì–†–£–ó–ö–ò –¢–û–í–ê–†–ê")
    print("=" * 60)
    
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ JSON
    json_file = "../data/local_parser_data_20250607_151208.json"
    target_product = None
    
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            products = json.load(f)
        
        print(f"üìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ JSON: {len(products)}")
        
        # –ò—â–µ–º ARDOR GAMING Rare M6
        for product in products:
            name = product.get('name') or ''
            if 'ARDOR GAMING Rare M' in name:
                target_product = product
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {name}")
                break
        
        if not target_product:
            print("‚ùå –¢–æ–≤–∞—Ä ARDOR GAMING Rare M –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON!")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞
    print(f"\nüìã –ê–ù–ê–õ–ò–ó –¢–û–í–ê–†–ê:")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {target_product.get('name')}")
    print(f"   ID: {target_product.get('id')}")
    print(f"   URL: {target_product.get('url')}")
    print(f"   –¶–µ–Ω–∞ —Å–∫–∏–¥–æ—á–Ω–∞—è: {target_product.get('price_discounted')}")
    print(f"   –¶–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è: {target_product.get('price_original')}")
    print(f"   –†–µ–π—Ç–∏–Ω–≥: {target_product.get('rating')}")
    print(f"   –û—Ç–∑—ã–≤—ã: {target_product.get('number_of_reviews')}")
    print(f"   –ë—Ä–µ–Ω–¥: {target_product.get('brand_name')}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {len(target_product.get('categories', []))}")
    print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(target_product.get('images', []))}")
    print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {len(target_product.get('characteristics', {}))}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–• –ü–û–õ–ï–ô:")
    required_fields = ['name', 'url', 'price_original']
    missing_fields = []
    
    for field in required_fields:
        value = target_product.get(field)
        if value is None or value == "":
            missing_fields.append(field)
            print(f"   ‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        else:
            print(f"   ‚úÖ {field}: {value}")
    
    if missing_fields:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
    else:
        print(f"\n‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    print(f"\nüöÄ –ü–û–ü–´–¢–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ù–ê –°–ï–†–í–ï–†:")
    print("-" * 40)
    
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        upload_data = {
            "products": [target_product]
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        response = requests.post(
            "http://127.0.0.1:5001/api/upload-products",
            json=upload_data,
            timeout=30
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            print(f"   –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {result}")
            print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result.get('processed_count', 'N/A')}")
            print(f"   –î–æ–±–∞–≤–ª–µ–Ω–æ: {result.get('added_count', 'N/A')}")
            print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {result.get('updated_count', 'N/A')}")
            print(f"   –û—à–∏–±–æ–∫: {result.get('error_count', 'N/A')}")
            
            if result.get('errors'):
                print(f"   –û—à–∏–±–∫–∏:")
                for error in result.get('errors', []):
                    print(f"     ‚Ä¢ {error}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–∫–∂–µ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞
            for key, value in result.items():
                if key not in ['processed_count', 'added_count', 'updated_count', 'error_count', 'errors']:
                    print(f"   {key}: {value}")
                    
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–≤–∞—Ä–∞
    print(f"\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
    print("-" * 40)
    print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    for i, cat in enumerate(target_product.get('categories', []), 1):
        print(f"   {i}. {cat.get('name')} - {cat.get('url')}")
    
    print(f"\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞:")
    chars = target_product.get('characteristics', {})
    for group_name, group_chars in chars.items():
        print(f"   {group_name}:")
        for char in group_chars[:2]:  # –ø–µ—Ä–≤—ã–µ 2
            print(f"     ‚Ä¢ {char.get('title')}: {char.get('value')}")
        if len(group_chars) > 2:
            print(f"     ... –∏ –µ—â–µ {len(group_chars) - 2}")
    
    print(f"\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:")
    for i, img in enumerate(target_product.get('images', [])[:3], 1):
        print(f"   {i}. {img[:60]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–ê:")
    print("-" * 40)
    
    try:
        response = requests.get("http://127.0.0.1:5001/api/export-products", timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            products = data.get('products', [])
            
            # –ò—â–µ–º –Ω–∞—à —Ç–æ–≤–∞—Ä
            found = False
            for product in products:
                name = product.get('name', '')
                if 'ARDOR GAMING Rare M' in name:
                    found = True
                    print(f"‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
                    print(f"   ID: {product.get('id')}")
                    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
                    print(f"   –¶–µ–Ω–∞: {product.get('price_discounted')}‚ÇΩ")
                    break
            
            if not found:
                print(f"‚ùå –¢–æ–≤–∞—Ä –ù–ï –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏")
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

if __name__ == "__main__":
    debug_product_upload() 