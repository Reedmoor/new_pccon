#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ UnifiedProduct
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

try:
    from app.utils.standardization.standardize import standardize_characteristics, convert_to_unified_product
    from app.models.models import UnifiedProduct
    from app import create_app, db
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

def debug_conversion():
    """–û—Ç–ª–∞–¥–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    print("üîç –û–¢–õ–ê–î–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –¢–û–í–ê–†–ê")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ JSON
    json_file = "../data/local_parser_data_20250607_151208.json"
    target_product = None
    
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            products = json.load(f)
        
        # –ò—â–µ–º ARDOR GAMING Rare M
        for product in products:
            name = product.get('name') or ''
            if 'ARDOR GAMING Rare M' in name:
                target_product = product
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {name}")
                break
        
        if not target_product:
            print("‚ùå –¢–æ–≤–∞—Ä ARDOR GAMING Rare M –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return
    
    print(f"\nüîß –≠–¢–ê–ü 1: –°–¢–ê–ù–î–ê–†–¢–ò–ó–ê–¶–ò–Ø")
    print("-" * 40)
    
    try:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
        std_product = standardize_characteristics(target_product, 'dns')
        print(f"‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {std_product.get('product_name')}")
        print(f"   –¢–∏–ø: {std_product.get('product_type')}")
        print(f"   Vendor: {std_product.get('vendor', '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')}")
        print(f"   URL: {std_product.get('product_url')}")
        print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: {len(std_product.get('characteristics', {}))}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return
    
    print(f"\nüîß –≠–¢–ê–ü 2: –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –í UnifiedProduct")
    print("-" * 40)
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º vendor –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if not std_product.get('vendor'):
            std_product['vendor'] = 'dns'
            print(f"üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω vendor: dns")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UnifiedProduct
        unified_product = convert_to_unified_product(std_product)
        print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ UnifiedProduct —É—Å–ø–µ—à–Ω–∞")
        print(f"   –¢–∏–ø –æ–±—ä–µ–∫—Ç–∞: {type(unified_product)}")
        print(f"   product_name: {unified_product.product_name}")
        print(f"   product_type: {unified_product.product_type}")
        print(f"   vendor: {unified_product.vendor}")
        print(f"   price_discounted: {unified_product.price_discounted}")
        print(f"   price_original: {unified_product.price_original}")
        print(f"   product_url: {unified_product.product_url}")
        print(f"   characteristics: {type(unified_product.characteristics)} (length: {len(unified_product.characteristics) if unified_product.characteristics else 0})")
        print(f"   images: {type(unified_product.images)} (length: {len(unified_product.images) if unified_product.images else 0})")
        print(f"   category: {type(unified_product.category)} (length: {len(unified_product.category) if unified_product.category else 0})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ UnifiedProduct: {e}")
        import traceback
        traceback.print_exc()
        return
    
    print(f"\nüîß –≠–¢–ê–ü 3: –ü–†–û–í–ï–†–ö–ê –ü–û–õ–ï–ô –ë–î")
    print("-" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª–µ–π –º–æ–¥–µ–ª–∏
    required_fields = {
        'product_name': unified_product.product_name,
        'vendor': unified_product.vendor,
        'product_url': unified_product.product_url,
        'characteristics': unified_product.characteristics,
        'product_type': unified_product.product_type,
    }
    
    for field_name, field_value in required_fields.items():
        if field_value is None or field_value == "":
            print(f"‚ùå {field_name}: –ü–£–°–¢–û–ï ({field_value})")
        else:
            print(f"‚úÖ {field_name}: OK ({type(field_value)}, length: {len(str(field_value))})")
    
    print(f"\nüîß –≠–¢–ê–ü 4: –ü–†–û–ë–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î")
    print("-" * 40)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        app = create_app()
        with app.app_context():
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            existing = db.session.query(UnifiedProduct).filter(
                UnifiedProduct.product_name == unified_product.product_name,
                UnifiedProduct.vendor == unified_product.vendor
            ).first()
            
            if existing:
                print(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î —Å ID: {existing.id}")
                print(f"   –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø: {existing.product_type}")
                print(f"   –ù–æ–≤—ã–π —Ç–∏–ø: {unified_product.product_type}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–∏—è
                if existing.product_type != unified_product.product_type:
                    print(f"‚ùó –†–ê–ó–õ–ò–ß–ò–ï –í –¢–ò–ü–ï –¢–û–í–ê–†–ê!")
                
                return
            
            # –ü—Ä–æ–±—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            print(f"üíæ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞...")
            db.session.add(unified_product)
            db.session.flush()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
            
            print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! ID –±—É–¥–µ—Ç: {unified_product.id}")
            
            # –ù–ï –∫–æ–º–º–∏—Ç–∏–º, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º
            db.session.rollback()
            print(f"üîÑ Rollback –≤—ã–ø–æ–ª–Ω–µ–Ω (—Ç–µ—Å—Ç)")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–±–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        
        try:
            db.session.rollback()
        except:
            pass

if __name__ == "__main__":
    debug_conversion() 