#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–∞
–£–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª–∞–º–∏ –≤ –ø–∞–ø–∫–µ data —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π
"""

import json
import os
import shutil
import logging
import argparse
import requests
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('local_data_manager')

class LocalDataManager:
    def __init__(self, data_dir: Path = None, server_url: str = "http://127.0.0.1:5000"):
        """
        –ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            data_dir: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏
            server_url: URL —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        """
        self.server_url = server_url.rstrip('/')
        
        # –ü—É—Ç–∏ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
        current_dir = Path(__file__).parent
        self.root_dir = current_dir.parent
        self.data_dir = data_dir or self.root_dir / "data"
        self.local_data_dir = self.root_dir / "local_data"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        self.data_dir.mkdir(exist_ok=True)
        self.local_data_dir.mkdir(exist_ok=True)
        
        logger.info(f"Data Manager initialized")
        logger.info(f"Data directory: {self.data_dir}")
        logger.info(f"Local data directory: {self.local_data_dir}")
        logger.info(f"Server URL: {self.server_url}")
    
    def detect_category_from_data(self, products: List[Dict]) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        """
        if not products:
            return "unknown"
        
        # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ø–µ—Ä–≤–æ–º —Ç–æ–≤–∞—Ä–µ
        first_product = products[0]
        categories = first_product.get('categories', [])
        
        # –ò—â–µ–º —Å–∞–º—É—é —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω—é—é –≤ —Å–ø–∏—Å–∫–µ)
        for category in reversed(categories):
            name = category.get('name', '').strip()
            if name and name not in ['–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ü–ö', '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ü–ö']:
                return name
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
        if categories:
            return categories[-1].get('name', 'unknown')
        
        return "unknown"
    
    def get_category_short_name(self, category: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        
        Args:
            category: –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            
        Returns:
            –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞
        """
        mapping = {
            "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã": "videokarty",
            "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã": "processory", 
            "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã": "materinskie_platy",
            "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å": "operativnaya_pamyat",
            "–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è": "bloki_pitaniya",
            "–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤": "kulery",
            "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏": "zhestkie_diski",
            "SSD –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏": "ssd_sata",
            "SSD M.2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏": "ssd_m2",
            "–ö–æ—Ä–ø—É—Å–∞": "korpusa"
        }
        
        # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        for full_name, short_name in mapping.items():
            if full_name.lower() in category.lower():
                return short_name
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        return category.lower().replace(' ', '_').replace('.', '_')
    
    def organize_data_files(self):
        """
        –û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Ñ–∞–π–ª—ã –≤ data –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
        """
        logger.info("üóÇÔ∏è Organizing data files...")
        
        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä—Å–µ—Ä–∞
        data_files = list(self.data_dir.glob("local_parser_data_*.json"))
        
        if not data_files:
            logger.info("No parser data files found")
            return
        
        logger.info(f"Found {len(data_files)} data files to organize")
        
        organized_count = 0
        for file_path in sorted(data_files):
            try:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                products = data.get('products', []) if isinstance(data, dict) else data
                
                if not products:
                    logger.warning(f"Empty file: {file_path.name}")
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                category = self.detect_category_from_data(products)
                short_category = self.get_category_short_name(category)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                timestamp = datetime.fromtimestamp(file_path.stat().st_mtime)
                new_filename = f"local_{short_category}_{timestamp.strftime('%Y%m%d_%H%M%S')}.json"
                new_path = self.local_data_dir / new_filename
                
                # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º –∏–º–µ–Ω–µ–º
                shutil.copy2(file_path, new_path)
                
                # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata = {
                    'category': category,
                    'short_category': short_category,
                    'product_count': len(products),
                    'original_file': file_path.name,
                    'organized_at': datetime.now().isoformat(),
                    'file_size': file_path.stat().st_size
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                metadata_path = new_path.with_suffix('.meta.json')
                with open(metadata_path, 'w', encoding='utf-8') as f:
                    json.dump(metadata, f, ensure_ascii=False, indent=2)
                
                logger.info(f"‚úÖ Organized: {file_path.name} -> {new_filename}")
                logger.info(f"   Category: {category} ({len(products)} products)")
                
                organized_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå Failed to organize {file_path.name}: {e}")
        
        logger.info(f"üéâ Organized {organized_count} files")
    
    def get_organized_files(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
        """
        files_info = []
        
        # –ò—â–µ–º –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        data_files = list(self.local_data_dir.glob("local_*.json"))
        data_files = [f for f in data_files if not f.name.endswith('.meta.json')]
        
        for file_path in sorted(data_files, key=lambda x: x.stat().st_mtime, reverse=True):
            metadata_path = file_path.with_suffix('.meta.json')
            
            try:
                # –ß–∏—Ç–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                metadata = {}
                if metadata_path.exists():
                    with open(metadata_path, 'r', encoding='utf-8') as f:
                        metadata = json.load(f)
                
                # –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                products = data.get('products', []) if isinstance(data, dict) else data
                
                file_info = {
                    'path': file_path,
                    'name': file_path.name,
                    'category': metadata.get('category', 'Unknown'),
                    'short_category': metadata.get('short_category', 'unknown'),
                    'product_count': len(products),
                    'file_size': file_path.stat().st_size,
                    'modified': datetime.fromtimestamp(file_path.stat().st_mtime),
                    'metadata': metadata
                }
                
                files_info.append(file_info)
                
            except Exception as e:
                logger.error(f"Error reading file {file_path}: {e}")
        
        return files_info
    
    def upload_file_to_server(self, file_path: Path, category: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            products = data.get('products', []) if isinstance(data, dict) else data
            
            if not products:
                logger.warning(f"No products in {file_path.name}")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
            payload = {
                'products': products,
                'source': 'local_data_manager',
                'category': category,
                'file_name': file_path.name,
                'timestamp': datetime.now().isoformat(),
                'parser_version': '3.0'
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            logger.info(f"Uploading {len(products)} products from {category}...")
            
            response = requests.post(
                f"{self.server_url}/api/upload-products",
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=60
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ Successfully uploaded: {result.get('message')}")
                return True
            else:
                logger.error(f"‚ùå Server returned status {response.status_code}: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Failed to upload {file_path.name}: {e}")
            return False
    
    def upload_all_to_server(self):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        """
        files_info = self.get_organized_files()
        
        if not files_info:
            logger.info("No organized files found to upload")
            return
        
        logger.info(f"üì§ Uploading {len(files_info)} files to server...")
        
        success_count = 0
        total_products = 0
        
        for file_info in files_info:
            logger.info(f"\nüìÇ Uploading: {file_info['category']}")
            logger.info(f"   File: {file_info['name']}")
            logger.info(f"   Products: {file_info['product_count']}")
            
            if self.upload_file_to_server(file_info['path'], file_info['category']):
                success_count += 1
                total_products += file_info['product_count']
            else:
                logger.error(f"‚ùå Failed to upload {file_info['name']}")
        
        logger.info(f"\nüéâ Upload summary:")
        logger.info(f"   Success: {success_count}/{len(files_info)} files")
        logger.info(f"   Total products uploaded: {total_products:,}")
    
    def show_statistics(self):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        """
        logger.info("üìä Local Data Statistics")
        logger.info("=" * 50)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ data –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        data_files = list(self.data_dir.glob("local_parser_data_*.json"))
        logger.info(f"üìÅ Raw data files: {len(data_files)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        organized_files = self.get_organized_files()
        logger.info(f"üóÇÔ∏è Organized files: {len(organized_files)}")
        
        if organized_files:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {}
            for file_info in organized_files:
                category = file_info['category']
                if category not in categories:
                    categories[category] = {'files': 0, 'products': 0}
                categories[category]['files'] += 1
                categories[category]['products'] += file_info['product_count']
            
            logger.info("\nüìÇ By categories:")
            for category, stats in categories.items():
                logger.info(f"   {category}: {stats['files']} files, {stats['products']} products")
            
            total_products = sum(f['product_count'] for f in organized_files)
            logger.info(f"\nüéØ Total products: {total_products:,}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Local data manager')
    parser.add_argument('--server-url', type=str, default='http://127.0.0.1:5000', help='Server URL')
    parser.add_argument('--organize', action='store_true', help='Organize data files')
    parser.add_argument('--upload', action='store_true', help='Upload organized files to server')
    parser.add_argument('--stats', action='store_true', help='Show statistics')
    parser.add_argument('--all', action='store_true', help='Organize and upload')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = LocalDataManager(server_url=args.server_url)
    
    try:
        if args.stats:
            manager.show_statistics()
        elif args.organize:
            manager.organize_data_files()
        elif args.upload:
            manager.upload_all_to_server()
        elif args.all:
            manager.organize_data_files()
            manager.upload_all_to_server()
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            manager.show_statistics()
        
        return 0
        
    except KeyboardInterrupt:
        logger.info("Operation interrupted by user")
        return 1
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return 1

if __name__ == '__main__':
    exit(main()) 