#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞
"""

import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

def determine_product_type(categories):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–∫–æ–ø–∏—è –∏–∑ standardize.py)
    """
    category_str = ' '.join(categories).lower()
    
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: '{category_str}'")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤
    checks = [
        (['–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞', '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã', 'motherboard'], 'motherboard'),
        (['–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', '–±–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è', 'power supply'], 'power_supply'),
        (['–∫—É–ª–µ—Ä', '–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', 'cooler', 'cooling', '–æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', '—Å–∏—Å—Ç–µ–º—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞', '—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', '–∫—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤'], 'cooler'),
        (['–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã', 'cpu', 'processor'], 'processor'),
        (['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã', 'gpu', 'graphics card'], 'graphics_card'),
        (['–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', '–ø–∞–º—è—Ç—å dimm', 'ram', 'memory', '–º–æ–¥—É–ª–∏ –ø–∞–º—è—Ç–∏'], 'ram'),
        (['–∂–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫', '–∂–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏', 'ssd', 'hdd', '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å', 'storage', 'ssd –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏', 'ssd m.2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏', 'ssd m_2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏', '—Ç–≤–µ—Ä–¥–æ—Ç–µ–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å', '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏ ssd'], 'hard_drive'),
        (['–∫–æ—Ä–ø—É—Å', 'case', '–∫–æ—Ä–ø—É—Å–∞'], 'case'),
    ]
    
    for terms, product_type in checks:
        found_terms = [term for term in terms if term in category_str]
        if found_terms:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–∏–ø {product_type}: —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å {found_terms}")
            return product_type
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∏–ø {product_type}: –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å {terms[:3]}...")
    
    print(f"‚ö†Ô∏è –¢–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω - –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º 'other'")
    return 'other'

def standardize_characteristics_debug(source_data, vendor):
    """
    –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    """
    print(f"\nüîß –°–¢–ê–ù–î–ê–†–¢–ò–ó–ê–¶–ò–Ø –¢–û–í–ê–†–ê –û–¢ {vendor.upper()}")
    print("=" * 50)
    
    standardized = {
        "vendor_specific": {},
    }
    
    if vendor.lower() == 'dns':
        print("üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ DNS –¥–∞–Ω–Ω—ã—Ö...")
        
        standardized["id"] = source_data.get("id")
        standardized["product_name"] = source_data.get("name")
        standardized["price_discounted"] = source_data.get("price_discounted")
        standardized["price_original"] = source_data.get("price_original")
        standardized["rating"] = source_data.get("rating")
        standardized["number_of_reviews"] = source_data.get("number_of_reviews")
        standardized["images"] = source_data.get("images", [])
        standardized["product_url"] = source_data.get("url")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [cat.get("name") for cat in source_data.get("categories", [])]
        standardized["category"] = categories
        
        print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞
        product_type = determine_product_type(categories)
        standardized["product_type"] = product_type
        
        print(f"üè∑Ô∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø: {product_type}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        characteristics = {}
        chars_data = source_data.get("characteristics", {})
        print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {len(chars_data)}")
        
        for group_name, props in chars_data.items():
            print(f"   ‚Ä¢ {group_name}: {len(props)} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
            for prop in props:
                prop_title = prop.get("title")
                prop_value = prop.get("value")
                characteristics[prop_title] = prop_value
    
    standardized["characteristics"] = characteristics
    return standardized

def debug_ardor_product():
    """–û—Ç–ª–∞–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ—Ä–ø—É—Å–∞ ARDOR GAMING"""
    print("üîç –û–¢–õ–ê–î–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–†–ü–£–°–ê ARDOR GAMING")
    print("=" * 60)
    
    # –ß–∏—Ç–∞–µ–º —Ç–æ–≤–∞—Ä –∏–∑ JSON
    json_file = "../data/local_parser_data_20250607_151208.json"
    target_product = None
    
    try:
        with open(json_file, 'r', encoding='utf-8') as f:
            products = json.load(f)
        
        # –ò—â–µ–º ARDOR GAMING Rare M
        for product in products:
            name = product.get('name') or ''
            if 'ARDOR GAMING Rare M' in name:
                target_product = product
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ–≤–∞—Ä: {name}")
                break
        
        if not target_product:
            print("‚ùå –¢–æ–≤–∞—Ä ARDOR GAMING Rare M –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON: {e}")
        return
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è
    std_product = standardize_characteristics_debug(target_product, 'dns')
    
    print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –°–¢–ê–ù–î–ê–†–¢–ò–ó–ê–¶–ò–ò:")
    print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {std_product.get('product_name')}")
    print(f"   –¢–∏–ø: {std_product.get('product_type')}")
    print(f"   –¶–µ–Ω–∞ —Å–∫–∏–¥–æ—á–Ω–∞—è: {std_product.get('price_discounted')}")
    print(f"   –¶–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è: {std_product.get('price_original')}")
    print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {std_product.get('category')}")
    print(f"   URL: {std_product.get('product_url')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—É–¥–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω
    print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ò–Ø:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['product_name', 'product_type']
    missing_fields = []
    
    for field in required_fields:
        value = std_product.get(field)
        if not value or value == "":
            missing_fields.append(field)
            print(f"   ‚ùå {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ")
        else:
            print(f"   ‚úÖ {field}: {value}")
    
    if missing_fields:
        print(f"\n‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
        print("   –¢–æ–≤–∞—Ä –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    else:
        print(f"\n‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        print("   –¢–æ–≤–∞—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if std_product.get('product_type') == 'other':
        print(f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –¢–∏–ø —Ç–æ–≤–∞—Ä–∞ 'other' - –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞")

if __name__ == "__main__":
    debug_ardor_product() 