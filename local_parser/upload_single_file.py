#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π (5001) –∏–ª–∏ Docker (5000) —Å–µ—Ä–≤–µ—Ä
"""

import os
import sys
import json
import logging
import requests
import argparse
from pathlib import Path
from datetime import datetime
from typing import Dict, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('upload_single_file')

class SingleFileUploader:
    def __init__(self, server_url):
        """
        –ó–∞–≥—Ä—É–∑—á–∏–∫ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        
        Args:
            server_url: URL —Å–µ—Ä–≤–µ—Ä–∞ (–ª–æ–∫–∞–ª—å–Ω—ã–π 5001 –∏–ª–∏ Docker 5000)
        """
        self.server_url = server_url.rstrip('/')
        self.session = requests.Session()
        
        logger.info(f"Single File Uploader initialized")
        logger.info(f"Target server: {self.server_url}")
    
    def test_server_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            logger.info(f"Testing connection to server: {self.server_url}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            if ":5000" in self.server_url:
                # Docker —Å–µ—Ä–≤–µ—Ä - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º health check, —Ç–∞–∫ –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç
                logger.info("‚úÖ Skipping health check for Docker server (5000) - will test upload directly")
                return True
            else:
                # –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                test_url = f"{self.server_url}/"
                response = self.session.get(test_url, timeout=10)
                
                if response.status_code == 200:
                    logger.info("‚úÖ Server connection successful")
                    return True
                else:
                    logger.error(f"‚ùå Server returned status {response.status_code}")
                    return False
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Failed to connect to server: {e}")
            return False
    
    def detect_category(self, products: List[Dict]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤"""
        if not products:
            return "unknown"
        
        first_product = products[0]
        categories = first_product.get('categories', [])
        
        for category in reversed(categories):
            name = category.get('name', '').strip()
            if name and name not in ['–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ü–ö', '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –ü–ö']:
                return name
        
        if categories:
            return categories[-1].get('name', 'unknown')
        
        return "unknown"
    
    def upload_file(self, file_path: str) -> bool:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            file_path = Path(file_path)
            
            if not file_path.exists():
                logger.error(f"‚ùå File not found: {file_path}")
                return False
            
            logger.info(f"üìÅ Reading file: {file_path.name}")
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            products = data.get('products', []) if isinstance(data, dict) else data
            
            if not products:
                logger.error(f"‚ùå No products found in {file_path.name}")
                return False
            
            category = self.detect_category(products)
            
            logger.info(f"üìä File info:")
            logger.info(f"   Products: {len(products):,}")
            logger.info(f"   Category: {category}")
            logger.info(f"   Size: {file_path.stat().st_size / 1024:.1f} KB")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload –¥–ª—è API
            payload = {
                'products': products,
                'source': 'single_file_upload',
                'category': category,
                'file_name': file_path.name,
                'timestamp': datetime.now().isoformat(),
                'parser_version': '3.0',
                'upload_type': 'single_file'
            }
            
            logger.info(f"üöÄ Uploading {len(products)} products to server...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            response = self.session.post(
                f"{self.server_url}/api/upload-products",
                json=payload,
                headers={'Content-Type': 'application/json'},
                timeout=120
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.info(f"‚úÖ Successfully uploaded {file_path.name}")
                logger.info(f"   Server response: {result.get('message', 'Upload completed')}")
                return True
            else:
                logger.error(f"‚ùå Server returned status {response.status_code}")
                logger.error(f"   Response: {response.text}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Failed to upload file: {e}")
            return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Upload single file to server')
    parser.add_argument('--server-url', type=str, required=True,
                       help='Server URL (e.g., http://127.0.0.1:5001 or http://127.0.0.1:5000)')
    parser.add_argument('--data-file', type=str, required=True,
                       help='Path to data file to upload')
    parser.add_argument('--test-connection', action='store_true',
                       help='Test connection to server only')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
    uploader = SingleFileUploader(server_url=args.server_url)
    
    try:
        if args.test_connection:
            if uploader.test_server_connection():
                logger.info("‚úÖ Server connection test successful")
                return 0
            else:
                logger.error("‚ùå Server connection test failed")
                return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
        if not uploader.test_server_connection():
            logger.error("‚ùå Cannot connect to server, aborting upload")
            return 1
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
        if uploader.upload_file(args.data_file):
            logger.info("‚úÖ File upload completed successfully!")
            return 0
        else:
            logger.error("‚ùå File upload failed")
            return 1
    
    except KeyboardInterrupt:
        logger.info("Operation interrupted by user")
        return 1
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        return 1


if __name__ == '__main__':
    exit(main()) 