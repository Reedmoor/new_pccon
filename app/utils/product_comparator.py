import json
import numpy as np
import os
import re
try:
    from langchain_gigachat.embeddings import GigaChatEmbeddings
    GIGACHAT_AVAILABLE = True
except ImportError:
    GigaChatEmbeddings = None
    GIGACHAT_AVAILABLE = False
    print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: langchain_gigachat –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –§—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.")
from typing import List, Dict, Tuple, Set
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ProductComparator:
    def __init__(self, credentials: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞ —Å GigaChatEmbeddings –∏ –∞–Ω–∞–ª–∏–∑–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        
        Args:
            credentials: –∫–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è GigaChat
        """
        if not credentials:
            credentials = os.environ.get("GIGACHAT_CREDENTIALS", "MjZjYjAwNzUtZTllZS00YjkxLWJlOGEtYjk5N2FjMzA3ZjBmOjQ3ZTVmZmM4LTJiZGQtNDU1OC1iNDdkLTBiZmJmZDNmNWI4Ng==")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è embeddings
        self.embeddings_cache = {}
        self.embeddings = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è GigaChat (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º embedding.py)
        os.environ["GIGACHAT_CREDENTIALS"] = credentials
        os.environ["GIGACHAT_SCOPE"] = "GIGACHAT_API_PERS"
        
        if GIGACHAT_AVAILABLE:
            try:
                logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChatEmbeddings...")
                self.embeddings = GigaChatEmbeddings(
                    credentials=credentials,
                    scope="GIGACHAT_API_PERS", 
                    verify_ssl_certs=False
                )
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                test_result = self.embeddings.embed_documents(["—Ç–µ—Å—Ç"])
                if test_result is None or len(test_result) == 0:
                    logger.error("GigaChat API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")
                    self.embeddings = None
                else:
                    logger.info("GigaChatEmbeddings –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ GigaChatEmbeddings: {e}")
                logger.warning("–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –±–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                self.embeddings = None
        else:
            logger.warning("GigaChat –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
            self.embeddings = None
            
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
        if self.embeddings:
            logger.info("üöÄ –ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ (—Å–µ–º–∞–Ω—Ç–∏–∫–∞ + —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)")
        else:
            logger.info("‚ö†Ô∏è –ö–æ–º–ø–∞—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (—Ç–æ–ª—å–∫–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)")
    
    def load_json_data(self, file_path: str) -> List[Dict]:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
        
        Args:
            file_path: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É
            
        Returns:
            —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –∏–∑ JSON
        """
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {file_path}: {e}")
            return []
    
    def extract_names(self, data: List[Dict], name_key: str = "name") -> List[str]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö JSON
        
        Args:
            data: —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            name_key: –∫–ª—é—á –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "name")
            
        Returns:
            —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π
        """
        names = []
        for item in data:
            if name_key in item:
                name = item[name_key]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
                if name is not None and str(name).strip():
                    names.append(str(name).strip())
                else:
                    logger.warning(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä —Å –ø—É—Å—Ç—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {item}")
        return names
    
    def extract_detailed_features(self, name: str) -> Dict[str, any]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        
        Args:
            name: –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            —Å–ª–æ–≤–∞—Ä—å —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–µ
        if name is None:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ None –≤–º–µ—Å—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞")
            return {}
        
        if not str(name).strip():
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
            return {}
        
        name_lower = str(name).lower().strip()
        features = {}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –±—Ä–µ–Ω–¥ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        brands = [
            'nvidia', 'amd', 'intel', 'asus', 'msi', 'gigabyte', 'evga', 'zotac', 
            'palit', 'gainward', 'powercolor', 'sapphire', 'corsair', 'gskill', 
            'kingston', 'crucial', 'patriot', 'hyperx', 'adata', 'samsung',
            'western digital', 'wd', 'seagate', 'toshiba', 'transcend', 'pny',
            'team', 'goodram', 'aorus', 'inno3d', 'galax', 'kfa2'
        ]
        for brand in brands:
            if brand in name_lower:
                features['brand'] = brand
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª–∏ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç
        gpu_patterns = [
            r'rtx\s*(\d{4})\s*(ti|super)?',      # RTX 4090, RTX 4090 Ti
            r'gtx\s*(\d{4})\s*(ti|super)?',      # GTX 1660 Ti
            r'rx\s*(\d{4})\s*(xt|pro|xtx)?',     # RX 7800 XT, RX 7900 XTX
            r'arc\s*([a-z]\d+)',                 # Intel Arc A770
            r'radeon\s*(\d{4})',                 # Radeon 7800
            r'geforce\s*(\d{4})',                # GeForce 1660
        ]
        
        for pattern in gpu_patterns:
            match = re.search(pattern, name_lower)
            if match:
                features['gpu_model'] = match.group(1)
                if len(match.groups()) > 1 and match.group(2):
                    features['gpu_variant'] = match.group(2)
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
        cpu_patterns = [
            r'i(\d)-(\d{4,5})[a-z]*',            # i5-12400, i7-13700K
            r'ryzen\s*(\d)\s*(\d{4})[a-z]*',     # Ryzen 5 5600X
            r'(\d{4,5})[a-z]*\s*(?:cpu|–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä)', # 12400 CPU
            r'core\s*(\d{4,5})[a-z]*',           # Core 12400
        ]
        
        for pattern in cpu_patterns:
            match = re.search(pattern, name_lower)
            if match:
                if 'i\\d' in pattern:
                    features['cpu_series'] = f"i{match.group(1)}"
                    features['cpu_model'] = match.group(2)
                elif 'ryzen' in pattern:
                    features['cpu_series'] = f"ryzen{match.group(1)}"
                    features['cpu_model'] = match.group(2)
                else:
                    features['cpu_model'] = match.group(1)
                break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ (–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
        memory_patterns = [
            r'(\d+)\s*(?:gb|–≥–±)(?:\s|$)',
            r'(\d+)\s*(?:tb|—Ç–±)(?:\s|$)',
            r'(\d+)gb',
            r'(\d+)–≥–±',
        ]
        
        memory_sizes = []
        for pattern in memory_patterns:
            matches = re.findall(pattern, name_lower)
            if matches:
                memory_sizes.extend([int(m) for m in matches])
        
        if memory_sizes:
            features['memory_sizes'] = list(set(memory_sizes))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            features['max_memory'] = max(memory_sizes)
            features['min_memory'] = min(memory_sizes)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç–æ—Ç—ã
        freq_patterns = [
            r'(\d{4})\s*(?:mhz|–º–≥—Ü)',
            r'(\d\.\d)\s*(?:ghz|–≥–≥—Ü)',
            r'(\d{4})mhz',
            r'(\d{4})–º–≥—Ü',
        ]
        
        frequencies = []
        for pattern in freq_patterns:
            matches = re.findall(pattern, name_lower)
            if matches:
                if 'ghz' in pattern or '–≥–≥—Ü' in pattern:
                    frequencies.extend([float(f) * 1000 for f in matches])  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MHz
                else:
                    frequencies.extend([int(f) for f in matches])
        
        if frequencies:
            features['frequencies'] = frequencies
            features['max_frequency'] = max(frequencies)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø—ã –ø–∞–º—è—Ç–∏/–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        tech_patterns = [
            r'ddr(\d)',
            r'gddr(\d+)',
            r'nvme',
            r'sata',
            r'pcie\s*(\d\.\d|\d+)',
            r'm\.2',
            r'dimm',
            r'so-dimm',
        ]
        
        for pattern in tech_patterns:
            match = re.search(pattern, name_lower)
            if match:
                if 'ddr' in pattern and 'gddr' not in pattern:
                    features['memory_type'] = f"ddr{match.group(1)}"
                elif 'gddr' in pattern:
                    features['video_memory_type'] = f"gddr{match.group(1)}"
                elif 'pcie' in pattern:
                    features['interface'] = f"pcie{match.group(1)}"
                elif pattern in ['nvme', 'sata', 'm\\.2', 'dimm', 'so-dimm']:
                    tech_type = pattern.replace('\\.', '.')
                    if tech_type in ['nvme', 'sata', 'm.2']:
                        features['storage_type'] = tech_type
                    elif tech_type in ['dimm', 'so-dimm']:
                        features['form_factor'] = tech_type
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏ –∫–æ–¥—ã
        serial_patterns = [
            r'([a-z]{2,4}\d{2,}[a-z]*\d*)',      # PSD48G240081
            r'(\[.*?\])',                        # [PSD48G240081]
        ]
        
        serials = []
        for pattern in serial_patterns:
            matches = re.findall(pattern, name_lower)
            if matches:
                serials.extend(matches)
        
        if serials:
            features['serials'] = [s.strip('[]') for s in serials]
        
        return features
    
    def generate_ngrams(self, text: str, n: int = 3) -> Set[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è N-–≥—Ä–∞–º–º –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            n: —Ä–∞–∑–º–µ—Ä N-–≥—Ä–∞–º–º—ã
            
        Returns:
            –º–Ω–æ–∂–µ—Å—Ç–≤–æ N-–≥—Ä–∞–º–º
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ None –∏ –Ω–µ –ø—É—Å—Ç–æ–π
        if text is None:
            return set()
        
        if not str(text).strip():
            return set()
        
        # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç
        text = re.sub(r'[^\w\s]', ' ', str(text).lower())
        words = text.split()
        
        ngrams = set()
        for i in range(len(words) - n + 1):
            ngram = ' '.join(words[i:i+n])
            ngrams.add(ngram)
        
        return ngrams
    
    def calculate_feature_similarity(self, features1: Dict, features2: Dict) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        
        Args:
            features1, features2: —Å–ª–æ–≤–∞—Ä–∏ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
            
        Returns:
            –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞ –æ—Ç 0 –¥–æ 1
        """
        if not features1 or not features2:
            return 0.0
        
        score = 0.0
        total_weight = 0.0
        
        # –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        weights = {
            'brand': 0.20,           # –ë—Ä–µ–Ω–¥ –≤–∞–∂–µ–Ω
            'gpu_model': 0.30,       # –ú–æ–¥–µ–ª—å GPU –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞
            'gpu_variant': 0.25,     # Ti/Super/XT –æ—á–µ–Ω—å –≤–∞–∂–Ω—ã
            'cpu_series': 0.15,      # –°–µ—Ä–∏—è CPU –≤–∞–∂–Ω–∞
            'cpu_model': 0.30,       # –ú–æ–¥–µ–ª—å CPU –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞
            'max_memory': 0.20,      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏
            'memory_type': 0.15,     # –¢–∏–ø –ø–∞–º—è—Ç–∏
            'storage_type': 0.10,    # –¢–∏–ø –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—è
            'form_factor': 0.10,     # –§–æ—Ä–º-—Ñ–∞–∫—Ç–æ—Ä
            'serials': 0.20,         # –°–µ—Ä–∏–π–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤–∞–∂–Ω—ã –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        }
        
        for feature, weight in weights.items():
            if feature in features1 and feature in features2:
                val1 = features1[feature]
                val2 = features2[feature]
                
                if feature in ['gpu_model', 'cpu_model']:
                    # –î–ª—è –º–æ–¥–µ–ª–µ–π CPU/GPU - –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
                    if val1 == val2:
                        score += weight
                    elif isinstance(val1, str) and isinstance(val2, str):
                        try:
                            num1 = int(re.findall(r'\d+', val1)[0]) if re.findall(r'\d+', val1) else 0
                            num2 = int(re.findall(r'\d+', val2)[0]) if re.findall(r'\d+', val2) else 0
                            
                            # –û—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
                            diff = abs(num1 - num2)
                            if diff == 0:
                                score += weight
                            elif diff <= 25:   # –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ –º–æ–¥–µ–ª–∏ (7700 vs 7750)
                                score += weight * 0.9
                            elif diff <= 50:   # –ë–ª–∏–∑–∫–∏–µ –º–æ–¥–µ–ª–∏ (7700 vs 7750)
                                score += weight * 0.7
                            elif diff <= 100:  # –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ (7700 vs 7800)
                                score += weight * 0.2  # –ë–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ
                            # –ë–æ–ª–µ–µ –¥–∞–ª–µ–∫–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ—á—Ç–∏ –Ω–µ –∑–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
                        except:
                            pass
                elif feature == 'serials':
                    # –î–ª—è —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ
                    if isinstance(val1, list) and isinstance(val2, list):
                        similarity = self._compare_serials(val1, val2)
                        score += weight * similarity
                    elif val1 == val2:
                        score += weight
                elif feature == 'max_memory':
                    # –î–ª—è –æ–±—ä–µ–º–∞ –ø–∞–º—è—Ç–∏ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ
                    if val1 == val2:
                        score += weight
                    else:
                        ratio = min(val1, val2) / max(val1, val2)
                        if ratio >= 0.9:  # –û—á–µ–Ω—å –±–ª–∏–∑–∫–∏–µ –æ–±—ä–µ–º—ã
                            score += weight * ratio
                        elif ratio >= 0.5:  # –£–º–µ—Ä–µ–Ω–Ω–æ –±–ª–∏–∑–∫–∏–µ –æ–±—ä–µ–º—ã
                            score += weight * ratio * 0.5
                else:
                    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ - —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    if val1 == val2:
                        score += weight
                        
                total_weight += weight
        
        return score / total_weight if total_weight > 0 else 0.0
    
    def _compare_serials(self, serials1: List[str], serials2: List[str]) -> float:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ —Å —É—á–µ—Ç–æ–º —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
        if not serials1 or not serials2:
            return 0.0
        
        max_similarity = 0.0
        
        for s1 in serials1:
            for s2 in serials2:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if s1 == s2:
                    return 1.0
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–æ–±—â–∏–µ —Å–∏–º–≤–æ–ª—ã)
                if len(s1) >= 4 and len(s2) >= 4:
                    # –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –¥–ª–∏–Ω–æ–π >= 4
                    common_parts = 0
                    total_parts = 0
                    for i in range(len(s1) - 3):
                        substr = s1[i:i+4]
                        total_parts += 1
                        if substr in s2:
                            common_parts += 1
                    
                    if total_parts > 0:
                        similarity = common_parts / total_parts
                        max_similarity = max(max_similarity, similarity)
        
        return max_similarity
    
    def calculate_ngram_similarity(self, text1: str, text2: str, n: int = 3) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ N-–≥—Ä–∞–º–º
        
        Args:
            text1, text2: —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            n: —Ä–∞–∑–º–µ—Ä N-–≥—Ä–∞–º–º—ã
            
        Returns:
            –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞ –æ—Ç 0 –¥–æ 1
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç—ã –Ω–µ None
        if text1 is None or text2 is None:
            return 0.0
        
        ngrams1 = self.generate_ngrams(text1, n)
        ngrams2 = self.generate_ngrams(text2, n)
        
        if not ngrams1 or not ngrams2:
            return 0.0
        
        intersection = len(ngrams1.intersection(ngrams2))
        union = len(ngrams1.union(ngrams2))
        
        return intersection / union if union > 0 else 0.0
    
    def calculate_penalty(self, features1: Dict, features2: Dict) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–∞ –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
        
        Args:
            features1, features2: —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
            
        Returns:
            —à—Ç—Ä–∞—Ñ –æ—Ç 0 –¥–æ 1
        """
        penalty = 0.0
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã GPU (Ti vs –±–µ–∑ Ti, Super vs –æ–±—ã—á–Ω—ã–π)
        if ('gpu_variant' in features1) != ('gpu_variant' in features2):
            penalty += 0.6  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ
        elif 'gpu_variant' in features1 and 'gpu_variant' in features2:
            if features1['gpu_variant'] != features2['gpu_variant']:
                penalty += 0.4  # Ti vs Super —Ç–æ–∂–µ —à—Ç—Ä–∞—Ñ—É–µ—Ç—Å—è
        
        # –ë–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
        if 'brand' in features1 and 'brand' in features2:
            if features1['brand'] != features2['brand']:
                penalty += 0.4
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —à—Ç—Ä–∞—Ñ –∑–∞ —Å–∏–ª—å–Ω–æ —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
        for model_key in ['gpu_model', 'cpu_model']:
            if model_key in features1 and model_key in features2:
                try:
                    val1 = features1[model_key]
                    val2 = features2[model_key]
                    
                    if isinstance(val1, str) and isinstance(val2, str):
                        num1 = int(re.findall(r'\d+', val1)[0]) if re.findall(r'\d+', val1) else 0
                        num2 = int(re.findall(r'\d+', val2)[0]) if re.findall(r'\d+', val2) else 0
                        
                        diff = abs(num1 - num2)
                        if diff > 300:  # –û—á–µ–Ω—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
                            penalty += 0.8
                        elif diff > 100:  # –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ (7700 vs 7800)
                            penalty += 0.5  # –ë–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ
                        elif diff > 50:   # –£–º–µ—Ä–µ–Ω–Ω–æ —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏  
                            penalty += 0.2
                except:
                    pass
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –∫—Ä–∞—Ç–Ω–æ —Ä–∞–∑–Ω—ã–µ –æ–±—ä–µ–º—ã –ø–∞–º—è—Ç–∏
        if 'max_memory' in features1 and 'max_memory' in features2:
            ratio = max(features1['max_memory'], features2['max_memory']) / min(features1['max_memory'], features2['max_memory'])
            if ratio > 4:  # –†–∞–∑–Ω–∏—Ü–∞ –≤ 4 —Ä–∞–∑–∞ –∏ –±–æ–ª—å—à–µ
                penalty += 0.3
            elif ratio > 2:  # –†–∞–∑–Ω–∏—Ü–∞ –≤ 2 —Ä–∞–∑–∞
                penalty += 0.1
        
        return min(penalty, 0.95)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ 95%
    
    def enhanced_similarity(self, name1: str, name2: str, semantic_sim: float) -> float:
        """
        –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: —Å–µ–º–∞–Ω—Ç–∏–∫–∞ + —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ + N-–≥—Ä–∞–º–º—ã
        
        Args:
            name1, name2: –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
            semantic_sim: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –æ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
            
        Returns:
            –∏—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–¥—Å—Ç–≤–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ None
        if name1 is None or name2 is None:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ None –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö: name1={name1}, name2={name2}")
            return 0.0
        
        if not str(name1).strip() or not str(name2).strip():
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è: name1='{name1}', name2='{name2}'")
            return 0.0
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        features1 = self.extract_detailed_features(name1)
        features2 = self.extract_detailed_features(name2)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        feature_sim = self.calculate_feature_similarity(features1, features2)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ N-–≥—Ä–∞–º–º —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        ngram3_sim = self.calculate_ngram_similarity(name1, name2, 3)
        ngram5_sim = self.calculate_ngram_similarity(name1, name2, 5)
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Å–ª–æ–≤–æ-–≤-—Å–ª–æ–≤–æ —Å—Ö–æ–¥—Å—Ç–≤–æ
        words1 = set(re.findall(r'\w+', str(name1).lower()))
        words2 = set(re.findall(r'\w+', str(name2).lower()))
        word_sim = len(words1.intersection(words2)) / len(words1.union(words2)) if words1.union(words2) else 0
        
        # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å –≤–µ—Å–∞–º–∏ - —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
        weights = {
            'semantic': 0.25,   # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (—Å–Ω–∏–∂–∞–µ–º –≤–µ—Å)
            'features': 0.40,   # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ - –≥–ª–∞–≤–Ω–æ–µ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å)
            'ngram3': 0.15,     # 3-–≥—Ä–∞–º–º—ã
            'ngram5': 0.10,     # 5-–≥—Ä–∞–º–º—ã  
            'words': 0.10,      # –û–±—â–∏–µ —Å–ª–æ–≤–∞
        }
        
        final_score = (
            weights['semantic'] * semantic_sim +
            weights['features'] * feature_sim +
            weights['ngram3'] * ngram3_sim +
            weights['ngram5'] * ngram5_sim +
            weights['words'] * word_sim
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
        penalty = self.calculate_penalty(features1, features2)
        final_score *= (1 - penalty)
        
        return max(0.0, min(1.0, final_score))
    
    def get_embeddings(self, texts: List[str], batch_size: int = 100) -> np.ndarray:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ —Å –±–∞—Ç—á–∏–Ω–≥–æ–º –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            texts: —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
            batch_size: —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
            
        Returns:
            –º–∞—Å—Å–∏–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        """
        if not self.embeddings:
            logger.error("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            raise Exception("–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        if not texts:
            logger.warning("–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤")
            return np.array([])
        
        try:
            # –ü–†–û–°–¢–ê–Ø –í–ï–†–°–ò–Ø –ë–ï–ó –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è {len(texts)} —Ç–µ–∫—Å—Ç–æ–≤ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ)")
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã
            valid_texts = [text for text in texts if text and text.strip()]
            if len(valid_texts) != len(texts):
                logger.warning(f"–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(texts) - len(valid_texts)} –ø—É—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤")
            
            if not valid_texts:
                logger.error("–í—Å–µ —Ç–µ–∫—Å—Ç—ã –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                return np.array([])
            
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            all_embeddings = self.embeddings.embed_documents(valid_texts)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if all_embeddings is None:
                logger.error("GigaChat API –≤–µ—Ä–Ω—É–ª None –≤–º–µ—Å—Ç–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
                raise Exception("GigaChat API –≤–µ—Ä–Ω—É–ª None")
            
            if not isinstance(all_embeddings, (list, np.ndarray)):
                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(all_embeddings)}")
                raise Exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(all_embeddings)}")
            
            if len(all_embeddings) == 0:
                logger.error("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
                raise Exception("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤–∞–ª–∏–¥–Ω—ã–µ
            valid_embeddings = []
            for i, embedding in enumerate(all_embeddings):
                if embedding is None:
                    logger.error(f"–≠–º–±–µ–¥–¥–∏–Ω–≥ {i} —Ä–∞–≤–µ–Ω None")
                    raise Exception(f"–≠–º–±–µ–¥–¥–∏–Ω–≥ {i} —Ä–∞–≤–µ–Ω None")
                if not isinstance(embedding, (list, np.ndarray)):
                    logger.error(f"–≠–º–±–µ–¥–¥–∏–Ω–≥ {i} –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(embedding)}")
                    raise Exception(f"–≠–º–±–µ–¥–¥–∏–Ω–≥ {i} –∏–º–µ–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø: {type(embedding)}")
                valid_embeddings.append(embedding)
            
            result = np.array(valid_embeddings)
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(result)} —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–º {result.shape}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è graceful degradation
            logger.warning("–í–æ–∑–≤—Ä–∞—â–∞—é –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")
            return np.array([])
    
    def cosine_similarity(self, vec1: np.ndarray, vec2: np.ndarray) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –≤–µ–∫—Ç–æ—Ä–∞–º–∏
        
        Args:
            vec1, vec2: –≤–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns:
            –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
        """
        dot_product = np.dot(vec1, vec2)
        norm1 = np.linalg.norm(vec1)
        norm2 = np.linalg.norm(vec2)
        
        if norm1 == 0 or norm2 == 0:
            return 0.0
        
        return dot_product / (norm1 * norm2)
    
    def find_best_matches(self, names1: List[str], names2: List[str], 
                         threshold: float = 0.7, use_enhanced: bool = True) -> List[Tuple[str, str, float]]:
        """
        –ü–æ–∏—Å–∫ –Ω–∞–∏–ª—É—á—à–∏—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –º–µ–∂–¥—É –¥–≤—É–º—è —Å–ø–∏—Å–∫–∞–º–∏ –Ω–∞–∑–≤–∞–Ω–∏–π
        
        Args:
            names1, names2: —Å–ø–∏—Å–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            threshold: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞
            use_enhanced: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º (—Å–µ–º–∞–Ω—Ç–∏–∫–∞ + —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
            
        Returns:
            —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ1, –Ω–∞–∑–≤–∞–Ω–∏–µ2, —Å—Ö–æ–¥—Å—Ç–≤–æ)
        """
        if not names1 or not names2:
            logger.warning("–û–¥–∏–Ω –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –ø—É—Å—Ç–æ–π")
            return []
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –æ–±–µ–∏—Ö –≥—Ä—É–ø–ø –Ω–∞–∑–≤–∞–Ω–∏–π
            embeddings1 = self.get_embeddings(names1)
            embeddings2 = self.get_embeddings(names2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –ø–æ–ª—É—á–µ–Ω—ã
            if embeddings1.size == 0 or embeddings2.size == 0:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
                use_semantic = False
            else:
                use_semantic = True
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —ç–º–±–µ–¥–¥–∏–Ω–≥–∏: {embeddings1.shape} –∏ {embeddings2.shape}")
            
            matches = []
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å –∫–∞–∂–¥—ã–º –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ
            for i, name1 in enumerate(names1):
                best_similarity = 0.0
                best_match = None
                
                for j, name2 in enumerate(names2):
                    if use_semantic:
                        # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –æ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
                        semantic_sim = self.cosine_similarity(embeddings1[i], embeddings2[j])
                    else:
                        # –ï—Å–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                        semantic_sim = 0.0
                    
                    if use_enhanced:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: —Å–µ–º–∞–Ω—Ç–∏–∫–∞ + —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                        similarity = self.enhanced_similarity(name1, name2, semantic_sim)
                    else:
                        if use_semantic:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
                            similarity = semantic_sim
                        else:
                            # Fallback –Ω–∞ n-gram —Å—Ö–æ–¥—Å—Ç–≤–æ
                            similarity = self.calculate_ngram_similarity(name1, name2)
                    
                    if similarity > best_similarity:
                        best_similarity = similarity
                        best_match = (name1, name2, similarity)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ø–æ—Ä–æ–≥
                if best_match and best_similarity >= threshold:
                    matches.append(best_match)
                    logger.debug(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {name1} <-> {name2} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {best_similarity:.3f})")
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏–∑ {len(names1)} —Ç–æ–≤–∞—Ä–æ–≤")
            return matches
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {e}")
            return []
    
    def compare_categories(self, dns_category: str, citi_category: str, 
                          threshold: float = 0.7) -> Dict:
        """
        –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π DNS –∏ Citilink
        
        Args:
            dns_category: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ DNS
            citi_category: –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Citilink  
            threshold: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞
            
        Returns:
            —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        """
        # –ö–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π DNS
        dns_categories_map = {
            "SSD M_2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏": "product_data_SSD M_2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏.json",
            "SSD –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏": "product_data_SSD –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏.json",
            "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã": "product_data_–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.json",
            "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ 3_5_": "product_data_–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ 3_5_.json",
            "–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤": "product_data_–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤.json",
            "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å DIMM": "product_data_–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å DIMM.json",
            "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã": "product_data_–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã.json"
        }
        
        # –ö–∞—Ä—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π Citilink
        citi_categories_map = {
            "–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è": "bloki-pitaniya",
            "–ö–æ—Ä–ø—É—Å–∞": "korpusa",
            "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã": "materinskie-platy",
            "–ú–æ–¥—É–ª–∏ –ø–∞–º—è—Ç–∏": "moduli-pamyati",
            "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã": "processory",
            "–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞": "sistemy-ohlazhdeniya-processora",
            "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã": "videokarty",
            "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏": "zhestkie-diski"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if dns_category not in dns_categories_map:
            return {"error": f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è DNS '{dns_category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        if citi_category not in citi_categories_map:
            return {"error": f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è Citilink '{citi_category}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —Å fallback –ª–æ–≥–∏–∫–æ–π
        dns_filename = dns_categories_map[dns_category]
        citi_dirname = citi_categories_map[citi_category]
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è DNS —Ñ–∞–π–ª–æ–≤ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
        dns_paths = [
            f"/app/data/DNS_parsing/categories/{dns_filename}",
            os.path.join(os.path.dirname(__file__), 'DNS_parsing', 'categories', dns_filename)
        ]
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è Citilink —Ñ–∞–π–ª–æ–≤ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
        citi_paths = [
            f"/app/data/Citi_parser/data/{citi_dirname}/–¢–æ–≤–∞—Ä—ã.json",
            os.path.join(os.path.dirname(__file__), 'Citi_parser', 'data', citi_dirname, '–¢–æ–≤–∞—Ä—ã.json')
        ]
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        def find_existing_file(paths):
            for path in paths:
                if os.path.exists(path):
                    return path
            return None
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
        dns_file_path = find_existing_file(dns_paths)
        citi_file_path = find_existing_file(citi_paths)
        
        if not dns_file_path:
            return {"error": f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö DNS –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{dns_category}' –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        if not citi_file_path:
            return {"error": f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö Citilink –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{citi_category}' –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            dns_data = self.load_json_data(dns_file_path)
            citi_data = self.load_json_data(citi_file_path)
            
            if not dns_data or not citi_data:
                return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–æ–≤"}
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
            dns_names = self.extract_names(dns_data)
            citi_names = self.extract_names(citi_data)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            matches = self.find_best_matches(dns_names, citi_names, threshold)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            dns_map = {item['name']: item for item in dns_data}
            citi_map = {item['name']: item for item in citi_data}
            
            # –û–±–æ–≥–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö
            enriched_matches = []
            price_differences = []
            
            for dns_name, citi_name, similarity in matches:
                dns_item = dns_map.get(dns_name)
                citi_item = citi_map.get(citi_name)
                
                if dns_item and citi_item:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
                    dns_price = self._extract_price(dns_item)
                    citi_price = self._extract_price(citi_item)
                    
                    price_diff = None
                    if dns_price and citi_price:
                        price_diff = citi_price - dns_price
                        price_differences.append(price_diff)
                    
                    enriched_matches.append({
                        'dns_name': dns_name,
                        'citi_name': citi_name,
                        'similarity': similarity,
                        'dns_price': dns_price,
                        'citi_price': citi_price,
                        'price_difference': price_diff,
                        'dns_url': dns_item.get('url', ''),
                        'citi_url': citi_item.get('url', ''),
                        'dns_brand': dns_item.get('brand_name', ''),
                        'citi_brand': citi_item.get('brand', '')
                    })
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
            price_stats = self._calculate_price_statistics(price_differences)
            
            return {
                "dns_category": dns_category,
                "citi_category": citi_category,
                "dns_count": len(dns_data),
                "citi_count": len(citi_data),
                "matches_count": len(enriched_matches),
                "matches": enriched_matches,
                "threshold": threshold,
                "price_statistics": price_stats
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            return {"error": str(e)}
    
    def _extract_price(self, item: Dict) -> float:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–∑ —Ç–æ–≤–∞—Ä–∞"""
        try:
            # –î–ª—è DNS
            if 'price_original' in item:
                price = item['price_original']
            # –î–ª—è Citilink
            elif 'price' in item:
                price = item['price']
            else:
                return None
            
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏)
            if isinstance(price, dict):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏
                if 'current' in price:
                    price = price['current']
                elif 'old' in price:
                    price = price['old']
                elif 'value' in price:
                    price = price['value']
                elif 'amount' in price:
                    price = price['amount']
                else:
                    logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ü–µ–Ω—ã-—Å–ª–æ–≤–∞—Ä—è: {price}")
                    return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
            if isinstance(price, (int, float)):
                return float(price)
            elif isinstance(price, str):
                try:
                    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ç–æ—á–∫–∏ –∏ –∑–∞–ø—è—Ç–æ–π
                    price_clean = ''.join(c for c in price if c.isdigit() or c in '.,')
                    price_clean = price_clean.replace(',', '.')
                    return float(price_clean) if price_clean else None
                except (ValueError, TypeError):
                    return None
            else:
                logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ü–µ–Ω—ã: {type(price)}, –∑–Ω–∞—á–µ–Ω–∏–µ: {price}")
                return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ —Ç–æ–≤–∞—Ä–∞: {e}, —Ç–æ–≤–∞—Ä: {item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            return None
    
    def _calculate_price_statistics(self, price_differences: List[float]) -> Dict:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–∞–º"""
        if not price_differences:
            return {}
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏
        valid_diffs = [diff for diff in price_differences if diff is not None]
        
        if not valid_diffs:
            return {}
        
        return {
            'count': len(valid_diffs),
            'average_difference': sum(valid_diffs) / len(valid_diffs),
            'min_difference': min(valid_diffs),
            'max_difference': max(valid_diffs),
            'dns_cheaper_count': len([d for d in valid_diffs if d > 0]),
            'citi_cheaper_count': len([d for d in valid_diffs if d < 0]),
            'equal_price_count': len([d for d in valid_diffs if d == 0])
        }
    
    def get_available_categories(self) -> Dict[str, List[str]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        
        Returns:
            —Å–ª–æ–≤–∞—Ä—å —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ DNS –∏ Citilink
        """
        dns_categories = [
            "SSD M_2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏",
            "SSD –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏", 
            "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã",
            "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ 3_5_",
            "–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤",
            "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å DIMM",
            "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã"
        ]
        
        citi_categories = [
            "–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è",
            "–ö–æ—Ä–ø—É—Å–∞",
            "–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã",
            "–ú–æ–¥—É–ª–∏ –ø–∞–º—è—Ç–∏",
            "–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã",
            "–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞",
            "–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã",
            "–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏"
        ]
        
        return {
            "dns_categories": dns_categories,
            "citi_categories": citi_categories
        }
    
    def clear_embeddings_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
        # cache_size = len(self.embeddings_cache)
        # self.embeddings_cache.clear()
        # logger.info(f"–ö—ç—à –æ—á–∏—â–µ–Ω: —É–¥–∞–ª–µ–Ω–æ {cache_size} –∑–∞–ø–∏—Å–µ–π")
        # return cache_size
        logger.info("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –Ω–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å")
        return 0
    
    def get_cache_size(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫—ç—à–∞"""
        # return len(self.embeddings_cache)
        return 0

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞
_comparator_instance = None

def get_comparator():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–æ–º–ø–∞—Ä–∞—Ç–æ—Ä–∞"""
    global _comparator_instance
    if _comparator_instance is None:
        _comparator_instance = ProductComparator()
    return _comparator_instance 