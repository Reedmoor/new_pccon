import sys
from pathlib import Path
import json
import os
import traceback
import re
import time
import glob

# Add the project root directory to the Python path
sys.path.insert(0, str(Path(__file__).resolve().parent.parent.parent.parent))

try:
    from app import db, create_app
    from app.models.models import UnifiedProduct
    from app.utils.standardization.standardize import (
        standardize_characteristics,
        convert_to_unified_product
    )
except ImportError:
    print("Error importing app modules. Make sure you're running this script from the project root.")
    sys.exit(1)

def ensure_compatibility_characteristics(product_data):
    """
    Ensure all required characteristics for compatibility checks are present
    
    Args:
        product_data (dict): Standardized product data
    """
    characteristics = product_data.get("characteristics", {})
    product_type = product_data.get("product_type", "other")
    
    # Define default values based on product type
    if product_type == 'motherboard':
        if 'socket' not in characteristics:
            characteristics['socket'] = ''
        if 'form_factor' not in characteristics:
            characteristics['form_factor'] = ''
        if 'memory_type' not in characteristics:
            characteristics['memory_type'] = ''
        if 'memory_form_factor' not in characteristics:
            characteristics['memory_form_factor'] = ''
            
    elif product_type == 'processor':
        if 'socket' not in characteristics:
            characteristics['socket'] = ''
        if 'power_consumption' not in characteristics:
            characteristics['power_consumption'] = 0
        if 'core_count' not in characteristics:
            characteristics['core_count'] = 0
        if 'thread_count' not in characteristics:
            characteristics['thread_count'] = 0
            
    elif product_type == 'graphics_card':
        if 'power_consumption' not in characteristics:
            characteristics['power_consumption'] = 0
        if 'length' not in characteristics:
            characteristics['length'] = 0
        if 'memory_size' not in characteristics:
            characteristics['memory_size'] = 0
            
    elif product_type == 'ram':
        if 'memory_type' not in characteristics:
            characteristics['memory_type'] = ''
        if 'memory_size' not in characteristics:
            characteristics['memory_size'] = 0
        if 'memory_form_factor' not in characteristics:
            characteristics['memory_form_factor'] = ''
            
    elif product_type == 'power_supply':
        if 'wattage' not in characteristics:
            characteristics['wattage'] = 0
            
    elif product_type == 'cooler':
        if 'cooler_height' not in characteristics:
            characteristics['cooler_height'] = 0
            
    elif product_type == 'case':
        if 'supported_form_factors' not in characteristics:
            characteristics['supported_form_factors'] = []
        if 'max_gpu_length' not in characteristics:
            characteristics['max_gpu_length'] = 0
        if 'max_cooler_height' not in characteristics:
            characteristics['max_cooler_height'] = 0
            
    elif product_type == 'hard_drive':
        if 'storage_capacity' not in characteristics:
            characteristics['storage_capacity'] = 0
            
    # Update the product data with the ensured characteristics
    product_data["characteristics"] = characteristics

def detect_vendor_from_url(url):
    """Detect vendor from product URL"""
    if not url:
        return 'unknown'
    
    url_lower = url.lower()
    if 'citilink.ru' in url_lower:
        return 'citilink'
    elif 'dns-shop.ru' in url_lower:
        return 'dns'
    else:
        return 'unknown'

def detect_product_type(product_name, product_categories=None):
    """Detect product type from product name and categories"""
    if not product_name:
        return 'other'
    
    name_lower = product_name.lower()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if product_categories:
        for category in product_categories:
            cat_name = category.get('name', '').lower() if isinstance(category, dict) else ''
            if '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç' in cat_name or 'gpu' in cat_name or 'graphics' in cat_name:
                return 'graphics_card'
            elif '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä' in cat_name or 'cpu' in cat_name or 'processor' in cat_name:
                return 'processor'
            elif '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫' in cat_name or 'motherboard' in cat_name or 'mainboard' in cat_name:
                return 'motherboard'
            elif '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω' in cat_name and '–ø–∞–º—è—Ç' in cat_name:
                return 'ram'
            elif '–ø–∞–º—è—Ç—å' in cat_name and 'dimm' in cat_name:
                return 'ram'
            elif '–∫–æ—Ä–ø—É—Å' in cat_name or 'case' in cat_name:
                return 'case'
            elif '–±–ª–æ–∫' in cat_name and '–ø–∏—Ç–∞–Ω' in cat_name:
                return 'power_supply'
            elif '–∫—É–ª–µ—Ä' in cat_name or '–æ—Ö–ª–∞–∂–¥–µ–Ω' in cat_name or 'cooler' in cat_name:
                return 'cooler'
            elif 'ssd' in cat_name or ('–¥–∏—Å–∫' in cat_name) or '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª' in cat_name:
                return 'hard_drive'
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø–æ–º–æ–≥–ª–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    if any(keyword in name_lower for keyword in ['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', 'gpu', 'graphics', 'geforce', 'radeon', 'gtx', 'rtx']):
        return 'graphics_card'
    elif any(keyword in name_lower for keyword in ['–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', 'cpu', 'processor']):
        return 'processor'
    elif any(keyword in name_lower for keyword in ['intel core', 'amd ryzen', 'intel pentium', 'amd fx']):
        return 'processor'
    elif any(keyword in name_lower for keyword in ['–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞', 'motherboard', 'mainboard', '–º–∞—Ç. –ø–ª–∞—Ç–∞']):
        return 'motherboard'
    elif any(keyword in name_lower for keyword in ['–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', 'power supply', 'psu']) or (name_lower.endswith(' –≤—Ç') or ' –≤—Ç ' in name_lower):
        return 'power_supply'
    elif any(keyword in name_lower for keyword in ['–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', 'ram', 'memory', 'ddr4', 'ddr5', 'dimm']):
        return 'ram'
    elif any(keyword in name_lower for keyword in ['–∫—É–ª–µ—Ä', 'cooler', '–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ', '–≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä']):
        return 'cooler'
    elif any(keyword in name_lower for keyword in ['ssd', 'hdd', '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å', '–¥–∏—Å–∫', '–∂–µ—Å—Ç–∫–∏–π']):
        return 'hard_drive'
    elif any(keyword in name_lower for keyword in ['–∫–æ—Ä–ø—É—Å', 'case', 'tower', 'chassis']):
        return 'case'
    else:
        return 'other'

def import_products_from_data(products_data, source='local_parser'):
    """
    Import products from data list (for API usage)
    
    Args:
        products_data (list): List of product dictionaries
        source (str): Source identifier for logging
    
    Returns:
        dict: Import results
    """
    app = create_app()
    with app.app_context():
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {source}")
        
        added_count = 0
        error_count = 0
        results = []
        
        for idx, product in enumerate(products_data):
            try:
                # Detect vendor from URL
                vendor = detect_vendor_from_url(product.get('url', ''))
                print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {idx+1}: {product.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä')} –æ—Ç {vendor}")
                
                # Detect product type
                product_categories = product.get('categories', [])
                product_type = product.get('detected_product_type') or detect_product_type(product.get('name', ''), product_categories)
                
                # Standardize product data
                std_product = standardize_characteristics(product, vendor)
                std_product["vendor"] = vendor
                std_product["product_type"] = product_type
                
                # Ensure compatibility characteristics
                ensure_compatibility_characteristics(std_product)
                
                # Convert to UnifiedProduct
                unified_product = convert_to_unified_product(std_product)
                
                # Add to database
                db.session.add(unified_product)
                
                # Commit every 50 products
                if idx % 50 == 0 and idx > 0:
                    db.session.commit()
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {idx} —Ç–æ–≤–∞—Ä–æ–≤...")
                
                added_count += 1
                results.append({
                    'name': product.get('name', 'Unknown'),
                    'type': product_type,
                    'vendor': vendor,
                    'status': 'success'
                })
                
            except Exception as e:
                error_count += 1
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {idx+1}: {str(e)}"
                print(f"‚ùå {error_msg}")
                
                results.append({
                    'name': product.get('name', 'Unknown'),
                    'status': 'error',
                    'error': str(e)
                })
                
                # Rollback this product and continue
                db.session.rollback()
        
        # Final commit
        try:
            db.session.commit()
            print(f"üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, –û—à–∏–±–æ–∫: {error_count}")
            
            # Print statistics by product type
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤:")
            for product_type in ["case", "processor", "graphics_card", "motherboard", "power_supply", "ram", "cooler", "hard_drive"]:
                count = db.session.query(UnifiedProduct).filter(UnifiedProduct.product_type == product_type).count()
                if count > 0:
                    print(f"   {product_type}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
            
            return {
                'success': True,
                'added_count': added_count,
                'error_count': error_count,
                'results': results
            }
            
        except Exception as e:
            db.session.rollback()
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'added_count': 0,
                'error_count': len(products_data)
            }

def import_products():
    """Import products using manual file mapping to product types"""
    app = create_app()
    with app.app_context():
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª DNS
        latest_local_file = None
        local_files = glob.glob('data/local_parser_data_*.json')
        
        if local_files:
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
            latest_local_file = max(local_files, key=os.path.getmtime)
            print(f"–ù–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª DNS: {latest_local_file}")
        else:
            print("–õ–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã DNS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ø–∞—Ä—Å–µ—Ä–æ–≤ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        category_mapping = {
            # DNS –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            '–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã': 'graphics_card',
            '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã': 'processor',
            '–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã': 'motherboard',
            '–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å': 'ram',
            '–ö–æ—Ä–ø—É—Å–∞': 'case',
            '–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è': 'power_supply',
            '–ö—É–ª–µ—Ä—ã': 'cooler',
            '–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏': 'hard_drive',
            'SSD M.2': 'hard_drive',
            'SSD SATA': 'hard_drive',
            
            # Citilink –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–º–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π)
            'videokarty': 'graphics_card',
            'processory': 'processor',
            'materinskie-platy': 'motherboard',
            'moduli-pamyati': 'ram',
            'korpusa': 'case',
            'bloki-pitaniya': 'power_supply',
            'sistemy-ohlazhdeniya-processora': 'cooler',
            'zhestkie-diski': 'hard_drive',
            'ssd-nakopiteli': 'hard_drive',
            'ssd-m2': 'hard_drive',
            'ssd-sata': 'hard_drive'
        }

        # –†—É—á–Ω–æ–π –º–∞–ø–ø–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        file_mappings = {
            # –ö—É–ª–µ—Ä—ã
            "app/utils/old_dns_parser/product_data.json": ("dns", "cooler"),
            "app/utils/Citi_parser/data/sistemy-ohlazhdeniya-processora/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "cooler"),
            
            # –ö–æ—Ä–ø—É—Å–∞
            "app/utils/old_dns_parser/product_data.json": ("dns", "case"),
            "app/utils/Citi_parser/data/korpusa/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "case"),
            
            # –ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
            "app/utils/old_dns_parser/product_data.json": ("dns", "power_supply"),
            "app/utils/Citi_parser/data/bloki-pitaniya/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "power_supply"),
            
            # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã
            "app/utils/old_dns_parser/product_data.json": ("dns", "motherboard"),
            "app/utils/Citi_parser/data/materinskie-platy/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "motherboard"),
            
            # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
            "app/utils/old_dns_parser/product_data.json": ("dns", "processor"),
            "app/utils/Citi_parser/data/processory/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "processor"),
            
            # –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
            "app/utils/old_dns_parser/product_data.json": ("dns", "graphics_card"),
            "app/utils/Citi_parser/data/videokarty/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "graphics_card"),
            
            # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
            "app/utils/old_dns_parser/product_data.json": ("dns", "ram"),
            "app/utils/Citi_parser/data/moduli-pamyati/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "ram"),
            
            # –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏ (–≤—Å–µ —Ç–∏–ø—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ hard_drive)
            "app/utils/old_dns_parser/product_data.json": ("dns", "hard_drive"),
            "app/utils/Citi_parser/data/zhestkie-diski/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "hard_drive"),
            "app/utils/Citi_parser/data/ssd-nakopiteli/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "hard_drive")
        }
        
        all_products = []
        
        print("–ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª DNS
        dns_loaded = False
        if latest_local_file:
            try:
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ DNS: {latest_local_file}")
                
                with open(latest_local_file, 'r', encoding='utf-8') as f:
                    local_data = json.load(f)
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                products_by_category = {}
                
                if isinstance(local_data, list):
                    for product in local_data:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å –∏–º—è
                        if not product.get('name'):
                            print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ –∏–º–µ–Ω–∏: {product.get('id', 'ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                            continue
                            
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞
                        categories = product.get('categories', [])
                        category_name = None
                        
                        # –ò—â–µ–º –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        if categories:
                            for cat in categories:
                                if not isinstance(cat, dict):
                                    continue
                                    
                                cat_name = cat.get('name', '').lower()
                                if '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç' in cat_name:
                                    category_name = 'graphics_card'
                                elif '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä' in cat_name:
                                    category_name = 'processor'
                                elif '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫' in cat_name:
                                    category_name = 'motherboard'
                                elif ('–ø–∞–º—è—Ç' in cat_name and '–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω' in cat_name) or 'dimm' in cat_name:
                                    category_name = 'ram'
                                elif '–∫–æ—Ä–ø—É—Å' in cat_name:
                                    category_name = 'case'
                                elif ('–±–ª–æ–∫' in cat_name and '–ø–∏—Ç–∞–Ω' in cat_name) or '–±–ø' in cat_name:
                                    category_name = 'power_supply'
                                elif '–∫—É–ª–µ—Ä' in cat_name or '–æ—Ö–ª–∞–∂–¥–µ–Ω' in cat_name:
                                    category_name = 'cooler'
                                elif 'ssd' in cat_name or '–¥–∏—Å–∫' in cat_name or '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª' in cat_name:
                                    category_name = 'hard_drive'
                                
                                if category_name:
                                    break
                        
                        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞
                        if not category_name:
                            product_name = product.get('name', '').lower()
                            if '–≤–∏–¥–µ–æ–∫–∞—Ä—Ç' in product_name or 'graphics card' in product_name:
                                category_name = 'graphics_card'
                            elif '–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä' in product_name or 'cpu' in product_name:
                                category_name = 'processor'
                            elif '–º–∞—Ç–µ—Ä–∏–Ω—Å–∫' in product_name or 'motherboard' in product_name:
                                category_name = 'motherboard'
                            elif ('–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω' in product_name and '–ø–∞–º—è—Ç' in product_name) or 'ram' in product_name or 'dimm' in product_name:
                                category_name = 'ram'
                            elif '–∫–æ—Ä–ø—É—Å' in product_name or 'case' in product_name:
                                category_name = 'case'
                            elif '–±–ª–æ–∫ –ø–∏—Ç–∞–Ω' in product_name or 'power supply' in product_name:
                                category_name = 'power_supply'
                            elif '–∫—É–ª–µ—Ä' in product_name or 'cooler' in product_name:
                                category_name = 'cooler'
                            elif 'ssd' in product_name or '–∂–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫' in product_name or 'hdd' in product_name or '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å' in product_name:
                                category_name = 'hard_drive'
                            else:
                                # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
                                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
                                continue
                        
                        if category_name not in products_by_category:
                            products_by_category[category_name] = []
                        products_by_category[category_name].append(product)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                for category_name, products in products_by_category.items():
                    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ DNS {category_name}: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                    
                    for product in products:
                        try:
                            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                            std_product = standardize_characteristics(product, "dns")
                            std_product["vendor"] = "dns"
                            std_product["product_type"] = category_name
                            all_products.append(std_product)
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {product.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}: {str(e)}")
                
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products_by_category.get('motherboard', []))} –º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏—Ö –ø–ª–∞—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ DNS")
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {sum(len(products) for products in products_by_category.values())} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ DNS")
                dns_loaded = True
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {str(e)}")
                traceback.print_exc()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã Citilink –∏–∑ –ø–∞–ø–∫–∏ data
        citilink_data_dir = os.path.join('app', 'utils', 'Citi_parser', 'data')
        if os.path.exists(citilink_data_dir):
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            for category_dir in os.listdir(citilink_data_dir):
                category_path = os.path.join(citilink_data_dir, category_dir)
                if os.path.isdir(category_path):
                    products_file = os.path.join(category_path, '–¢–æ–≤–∞—Ä—ã.json')
                    if os.path.exists(products_file):
                        try:
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                            product_type = category_mapping.get(category_dir, None)
                            if not product_type:
                                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è Citilink: {category_dir}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                                continue
                                
                            print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Citilink {category_dir} ({product_type})")
                            
                            with open(products_file, 'r', encoding='utf-8') as f:
                                data = json.load(f)
                            
                            if isinstance(data, list):
                                products = data
                            else:
                                products = [data]
                            
                            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {products_file}")
                            
                            for product in products:
                                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                                std_product = standardize_characteristics(product, "citilink")
                                std_product["vendor"] = "citilink"
                                std_product["product_type"] = product_type
                                all_products.append(std_product)
                            
                            print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ —Ç–∏–ø–∞ {product_type} –æ—Ç citilink")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {products_file}: {str(e)}")
                            traceback.print_exc()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ DNS –∏–∑ old_dns_parser —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        dns_file = os.path.join('app', 'utils', 'old_dns_parser', 'product_data.json')
        if os.path.exists(dns_file) and not dns_loaded:
            try:
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö DNS –∏–∑ {dns_file} (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω)")
                
                with open(dns_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                if isinstance(data, list):
                    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    products_by_category = {}
                    
                    for product in data:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å –∏–º—è
                        if not product.get('name'):
                            print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä DNS –±–µ–∑ –∏–º–µ–Ω–∏: {product.get('id', 'ID –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
                            continue
                            
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –¥–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞
                        category_name = None
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
                        if 'category' in product:
                            category = product.get('category', '')
                            if isinstance(category, str):
                                category_name = category_mapping.get(category, None)
                        
                        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–≤–∞—Ä
                        if not category_name:
                            continue
                        
                        if category_name not in products_by_category:
                            products_by_category[category_name] = []
                        products_by_category[category_name].append(product)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    for category_name, products in products_by_category.items():
                        print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ DNS {category_name}: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
                        
                        for product in products:
                            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                            std_product = standardize_characteristics(product, "dns")
                            std_product["vendor"] = "dns"
                            std_product["product_type"] = category_name
                            all_products.append(std_product)
                    
                    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ DNS (—Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä)")
                    
                else:
                    print(f"–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ DNS –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {dns_file}: {str(e)}")
                traceback.print_exc()
        elif dns_loaded:
            print("–î–∞–Ω–Ω—ã–µ DNS —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–∞—Ä—Å–µ—Ä")
        
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {len(all_products)}")
        
        # Save to database
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        # Clear existing products first
        try:
            print("–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
            db.session.query(UnifiedProduct).delete()
            db.session.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}")
            db.session.rollback()
        
        # Convert to UnifiedProduct instances and save one by one
        added_count = 0
        error_count = 0
        
        for idx, product_data in enumerate(all_products):
            try:
                # Ensure all required characteristics for compatibility checks are present
                ensure_compatibility_characteristics(product_data)
                
                # Convert data to UnifiedProduct
                unified_product = convert_to_unified_product(product_data)
                
                # Add to session
                db.session.add(unified_product)
                
                # Commit every 100 products to avoid memory issues
                if idx % 100 == 0:
                    db.session.commit()
                    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {idx} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
                
                added_count += 1
            except Exception as e:
                error_count += 1
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {idx}: {str(e)}")
                # Print the problematic product data for debugging
                print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {product_data.get('product_name', 'No name')}")
                traceback.print_exc()
                
                # Rollback and continue
                db.session.rollback()
        
        # Final commit
        try:
            db.session.commit()
            print(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–æ–∫: {error_count}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
            for product_type in ["cooler", "case", "power_supply", "motherboard", "processor", "graphics_card", "ram", "hard_drive"]:
                count = db.session.query(UnifiedProduct).filter(UnifiedProduct.product_type == product_type).count()
                print(f"{product_type}: {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                
        except Exception as e:
            db.session.rollback()
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            traceback.print_exc()

if __name__ == "__main__":
    import_products() 