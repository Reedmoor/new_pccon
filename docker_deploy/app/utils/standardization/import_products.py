import sys
from pathlib import Path
import json
import os
import traceback
import re

# Add the project root directory to the Python path
sys.path.insert(0, str(Path(__file__).resolve().parent.parent.parent.parent))

try:
    from app import db, create_app
    from app.models.models import UnifiedProduct
    from app.utils.standardization.standardize import (
        standardize_characteristics,
        convert_to_unified_product
    )
except ImportError:
    print("Error importing app modules. Make sure you're running this script from the project root.")
    sys.exit(1)

def ensure_compatibility_characteristics(product_data):
    """
    Ensure all required characteristics for compatibility checks are present
    
    Args:
        product_data (dict): Standardized product data
    """
    characteristics = product_data.get("characteristics", {})
    product_type = product_data.get("product_type", "other")
    
    # Define default values based on product type
    if product_type == 'motherboard':
        if 'socket' not in characteristics:
            characteristics['socket'] = ''
        if 'form_factor' not in characteristics:
            characteristics['form_factor'] = ''
        if 'memory_type' not in characteristics:
            characteristics['memory_type'] = ''
            
    elif product_type == 'processor':
        if 'socket' not in characteristics:
            characteristics['socket'] = ''
        if 'power_consumption' not in characteristics:
            characteristics['power_consumption'] = 0
        if 'core_count' not in characteristics:
            characteristics['core_count'] = 0
        if 'thread_count' not in characteristics:
            characteristics['thread_count'] = 0
            
    elif product_type == 'graphics_card':
        if 'power_consumption' not in characteristics:
            characteristics['power_consumption'] = 0
        if 'length' not in characteristics:
            characteristics['length'] = 0
        if 'memory_size' not in characteristics:
            characteristics['memory_size'] = 0
            
    elif product_type == 'ram':
        if 'memory_type' not in characteristics:
            characteristics['memory_type'] = ''
        if 'memory_size' not in characteristics:
            characteristics['memory_size'] = 0
            
    elif product_type == 'power_supply':
        if 'wattage' not in characteristics:
            characteristics['wattage'] = 0
            
    elif product_type == 'cooler':
        if 'cooler_height' not in characteristics:
            characteristics['cooler_height'] = 0
            
    elif product_type == 'case':
        if 'supported_form_factors' not in characteristics:
            characteristics['supported_form_factors'] = []
        if 'max_gpu_length' not in characteristics:
            characteristics['max_gpu_length'] = 0
        if 'max_cooler_height' not in characteristics:
            characteristics['max_cooler_height'] = 0
            
    elif product_type == 'hard_drive':
        if 'storage_capacity' not in characteristics:
            characteristics['storage_capacity'] = 0
            
    # Update the product data with the ensured characteristics
    product_data["characteristics"] = characteristics

def detect_vendor_from_url(url):
    """Detect vendor from product URL"""
    if not url:
        return 'unknown'
    
    url_lower = url.lower()
    if 'citilink.ru' in url_lower:
        return 'citilink'
    elif 'dns-shop.ru' in url_lower:
        return 'dns'
    else:
        return 'unknown'

def detect_product_type(product_name):
    """Detect product type from product name"""
    if not product_name:
        return 'case'  # Default to case for korpusa category
    
    name_lower = product_name.lower()
    
    # More specific keyword matching
    if any(keyword in name_lower for keyword in ['–∫–æ—Ä–ø—É—Å', 'case', 'tower', 'chassis']):
        return 'case'
    elif any(keyword in name_lower for keyword in ['–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä', 'cpu', 'processor', 'intel', 'amd ryzen']):
        return 'processor'
    elif any(keyword in name_lower for keyword in ['–≤–∏–¥–µ–æ–∫–∞—Ä—Ç–∞', 'gpu', 'graphics', 'geforce', 'radeon']):
        return 'graphics_card'
    elif any(keyword in name_lower for keyword in ['–º–∞—Ç–µ—Ä–∏–Ω—Å–∫–∞—è –ø–ª–∞—Ç–∞', 'motherboard', 'mainboard']):
        return 'motherboard'
    elif any(keyword in name_lower for keyword in ['–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è', 'power supply', 'psu', '–≤—Ç']):
        return 'power_supply'
    elif any(keyword in name_lower for keyword in ['–æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å', 'ram', 'memory', 'ddr']):
        return 'ram'
    elif any(keyword in name_lower for keyword in ['–∫—É–ª–µ—Ä', 'cooler', '–æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ']):
        return 'cooler'
    elif any(keyword in name_lower for keyword in ['ssd', 'hdd', '–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å', '–¥–∏—Å–∫']):
        return 'hard_drive'
    else:
        return 'case'  # Default to case for korpusa

def import_products_from_data(products_data, source='local_parser'):
    """
    Import products from data list (for API usage)
    
    Args:
        products_data (list): List of product dictionaries
        source (str): Source identifier for logging
    
    Returns:
        dict: Import results
    """
    app = create_app()
    with app.app_context():
        print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç {len(products_data)} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ {source}")
        
        added_count = 0
        error_count = 0
        results = []
        
        for idx, product in enumerate(products_data):
            try:
                # Detect vendor from URL
                vendor = detect_vendor_from_url(product.get('url', ''))
                print(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä {idx+1}: {product.get('name', '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä')} –æ—Ç {vendor}")
                
                # Detect product type
                product_type = detect_product_type(product.get('name', ''))
                
                # Standardize product data
                std_product = standardize_characteristics(product, vendor)
                std_product["vendor"] = vendor
                std_product["product_type"] = product_type
                
                # Ensure compatibility characteristics
                ensure_compatibility_characteristics(std_product)
                
                # Convert to UnifiedProduct
                unified_product = convert_to_unified_product(std_product)
                
                # Add to database
                db.session.add(unified_product)
                
                # Commit every 50 products
                if idx % 50 == 0 and idx > 0:
                    db.session.commit()
                    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {idx} —Ç–æ–≤–∞—Ä–æ–≤...")
                
                added_count += 1
                results.append({
                    'name': product.get('name', 'Unknown'),
                    'type': product_type,
                    'vendor': vendor,
                    'status': 'success'
                })
                
            except Exception as e:
                error_count += 1
                error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ {idx+1}: {str(e)}"
                print(f"‚ùå {error_msg}")
                
                results.append({
                    'name': product.get('name', 'Unknown'),
                    'status': 'error',
                    'error': str(e)
                })
                
                # Rollback this product and continue
                db.session.rollback()
        
        # Final commit
        try:
            db.session.commit()
            print(f"üéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ: {added_count}, –û—à–∏–±–æ–∫: {error_count}")
            
            # Print statistics by product type
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Ç–æ–≤–∞—Ä–æ–≤:")
            for product_type in ["case", "processor", "graphics_card", "motherboard", "power_supply", "ram", "cooler", "hard_drive"]:
                count = db.session.query(UnifiedProduct).filter(UnifiedProduct.product_type == product_type).count()
                if count > 0:
                    print(f"   {product_type}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
            
            return {
                'success': True,
                'added_count': added_count,
                'error_count': error_count,
                'results': results
            }
            
        except Exception as e:
            db.session.rollback()
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
            print(f"‚ùå {error_msg}")
            return {
                'success': False,
                'error': error_msg,
                'added_count': 0,
                'error_count': len(products_data)
            }

def import_products():
    """Import products using manual file mapping to product types"""
    app = create_app()
    with app.app_context():
        
        # –†—É—á–Ω–æ–π –º–∞–ø–ø–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∫ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        file_mappings = {
            # –ö—É–ª–µ—Ä—ã
            "app/utils/DNS_parsing/categories/product_data_–ö—É–ª–µ—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤.json": ("dns", "cooler"),
            "app/utils/Citi_parser/data/sistemy-ohlazhdeniya-processora/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "cooler"),
            
            # –ö–æ—Ä–ø—É—Å–∞
            "app/utils/DNS_parsing/categories/product_data_–ö–æ—Ä–ø—É—Å–∞.json": ("dns", "case"),
            "app/utils/Citi_parser/data/korpusa/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "case"),
            
            # –ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
            "app/utils/DNS_parsing/categories/product_data_–ë–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è.json": ("dns", "power_supply"),
            "app/utils/Citi_parser/data/bloki-pitaniya/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "power_supply"),
            
            # –ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã
            "app/utils/DNS_parsing/categories/product_data_–ú–∞—Ç–µ—Ä–∏–Ω—Å–∫–∏–µ –ø–ª–∞—Ç—ã.json": ("dns", "motherboard"),
            "app/utils/Citi_parser/data/materinskie-platy/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "motherboard"),
            
            # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
            "app/utils/DNS_parsing/categories/product_data_–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã.json": ("dns", "processor"),
            "app/utils/Citi_parser/data/processory/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "processor"),
            
            # –í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã
            "app/utils/DNS_parsing/categories/product_data_–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã.json": ("dns", "graphics_card"),
            "app/utils/Citi_parser/data/videokarty/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "graphics_card"),
            
            # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å
            "app/utils/DNS_parsing/categories/product_data_–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å DIMM.json": ("dns", "ram"),
            "app/utils/Citi_parser/data/moduli-pamyati/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "ram"),
            
            # –ù–∞–∫–æ–ø–∏—Ç–µ–ª–∏ (–≤—Å–µ —Ç–∏–ø—ã –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ hard_drive)
            "app/utils/DNS_parsing/categories/product_data_SSD –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏.json": ("dns", "hard_drive"),
            "app/utils/DNS_parsing/categories/product_data_SSD M_2 –Ω–∞–∫–æ–ø–∏—Ç–µ–ª–∏.json": ("dns", "hard_drive"),
            "app/utils/DNS_parsing/categories/product_data_–ñ–µ—Å—Ç–∫–∏–µ –¥–∏—Å–∫–∏ 3_5_.json": ("dns", "hard_drive"),
            "app/utils/Citi_parser/data/zhestkie-diski/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "hard_drive"),
            "app/utils/Citi_parser/data/ssd-nakopiteli/–¢–æ–≤–∞—Ä—ã.json": ("citilink", "hard_drive"),
        }
        
        all_products = []
        
        print("–ù–∞—á–∏–Ω–∞–µ–º —Ä—É—á–Ω–æ–π –∏–º–ø–æ—Ä—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        for file_path, (vendor, product_type) in file_mappings.items():
            if not os.path.exists(file_path):
                print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                continue
                
            try:
                print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ {vendor} {product_type} –∏–∑ {file_path}...")
                
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                
                # Handle both single product and list of products
                if isinstance(data, list):
                    products = data
                else:
                    products = [data]
                
                for product in products:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    std_product = standardize_characteristics(product, vendor)
                    std_product["vendor"] = vendor
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
                    std_product["product_type"] = product_type
                    all_products.append(std_product)
                
                print(f"–ù–∞–π–¥–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Ç–∏–ø–∞ {product_type} –æ—Ç {vendor}")
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file_path}: {str(e)}")
                continue
        
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: {len(all_products)}")
        
        # Save to database
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        
        # Clear existing products first
        try:
            print("–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
            db.session.query(UnifiedProduct).delete()
            db.session.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {str(e)}")
            db.session.rollback()
        
        # Convert to UnifiedProduct instances and save one by one
        added_count = 0
        error_count = 0
        
        for idx, product_data in enumerate(all_products):
            try:
                # Ensure all required characteristics for compatibility checks are present
                ensure_compatibility_characteristics(product_data)
                
                # Convert data to UnifiedProduct
                unified_product = convert_to_unified_product(product_data)
                
                # Add to session
                db.session.add(unified_product)
                
                # Commit every 100 products to avoid memory issues
                if idx % 100 == 0:
                    db.session.commit()
                    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {idx} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
                
                added_count += 1
            except Exception as e:
                error_count += 1
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {idx}: {str(e)}")
                # Print the problematic product data for debugging
                print(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {product_data.get('product_name', 'No name')}")
                traceback.print_exc()
                
                # Rollback and continue
                db.session.rollback()
        
        # Final commit
        try:
            db.session.commit()
            print(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–æ–∫: {error_count}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
            for product_type in ["cooler", "case", "power_supply", "motherboard", "processor", "graphics_card", "ram", "hard_drive"]:
                count = db.session.query(UnifiedProduct).filter(UnifiedProduct.product_type == product_type).count()
                print(f"{product_type}: {count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
                
        except Exception as e:
            db.session.rollback()
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            traceback.print_exc()

if __name__ == "__main__":
    import_products() 