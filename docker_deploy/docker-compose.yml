version: '3.8'

services:
  # Основное веб-приложение
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://pccon_user:12345@db:5432/pccon_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=pcconf_production_secret_key_change_this
      - FLASK_ENV=production
      - GIGACHAT_CREDENTIALS=MjZjYjAwNzUtZTllZS00YjkxLWJlOGEtYjk5N2FjMzA3ZjBmOjQ3ZTVmZmM4LTJiZGQtNDU1OC1iNDdkLTBiZmJmZDNmNWI4Ng==
      - PARSER_API_URL=http://parser:5001
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - pccon_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Сервис парсера (отдельный контейнер)
  parser:
    build:
      context: .
      dockerfile: Dockerfile.parser
    ports:
      - "5001:5001"
    environment:
      - DATABASE_URL=postgresql://pccon_user:12345@db:5432/pccon_db
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=pcconf_production_secret_key_change_this
      - FLASK_ENV=production
      - MAIN_SERVER_URL=http://web:5000
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./app/utils:/app/app/utils
    networks:
      - pccon_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 60s
      timeout: 30s
      retries: 3

  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=pccon_db
      - POSTGRES_USER=pccon_user
      - POSTGRES_PASSWORD=12345
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - pccon_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pccon_user -d pccon_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass 12345
    volumes:
      - redis_data:/data
    networks:
      - pccon_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "12345", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx как reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - parser
    networks:
      - pccon_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  pccon_network:
    driver: bridge 