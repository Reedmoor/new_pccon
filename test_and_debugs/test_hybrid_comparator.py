#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ ProductComparator 
(—ç–º–±–µ–¥–¥–∏–Ω–≥–∏ + —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ + N-–≥—Ä–∞–º–º—ã)
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.abspath('.'))

from app.utils.product_comparator import ProductComparator

def test_hybrid_gpu_comparison():
    """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç —Å –≥–∏–±—Ä–∏–¥–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    print("=== –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç ===\n")
    print("üî¨ –ê–ª–≥–æ—Ä–∏—Ç–º: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ (25%) + –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (40%) + N-–≥—Ä–∞–º–º—ã (35%)")
    
    comparator = ProductComparator()
    
    if not comparator.embeddings:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
        return False
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        # –°–ª—É—á–∞–π 1: –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏ (Ti vs –±–µ–∑ Ti)
        ("NVIDIA GeForce RTX 4090 24GB GDDR6X", "NVIDIA GeForce RTX 4090 Ti 24GB GDDR6X"),
        
        # –°–ª—É—á–∞–π 2: –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –±–ª–∏–∑–∫–∏—Ö —á–∏—Å–µ–ª (7700 vs 7800)
        ("AMD Radeon RX 7700 XT 12GB GDDR6", "AMD Radeon RX 7800 XT 16GB GDDR6"),
        
        # –°–ª—É—á–∞–π 3: –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (Ti vs Super)
        ("NVIDIA GeForce GTX 1660 Ti 6GB GDDR6", "NVIDIA GeForce GTX 1660 Super 6GB GDDR6"),
        
        # –°–ª—É—á–∞–π 4: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ)
        ("Intel Arc A770 16GB GDDR6", "Intel Arc A770 16GB GDDR6"),
        
        # –°–ª—É—á–∞–π 5: –†–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        ("NVIDIA GeForce RTX 4090", "AMD Radeon RX 7900 XTX"),
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤:")
    
    all_results = []
    
    for i, (gpu1, gpu2) in enumerate(test_cases, 1):
        print(f"\n{i}. –¢–ï–°–¢: {gpu1} vs {gpu2}")
        print("-" * 80)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        features1 = comparator.extract_detailed_features(gpu1)
        features2 = comparator.extract_detailed_features(gpu2)
        
        print(f"   üîç –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
        print(f"      GPU 1: {features1}")
        print(f"      GPU 2: {features2}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        try:
            embeddings1 = comparator.get_embeddings([gpu1])
            embeddings2 = comparator.get_embeddings([gpu2])
            semantic_sim = comparator.cosine_similarity(embeddings1[0], embeddings2[0])
        except Exception as e:
            print(f"      ‚ùå –û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
            semantic_sim = 0.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ö–æ–¥—Å—Ç–≤–∞
        feature_sim = comparator.calculate_feature_similarity(features1, features2)
        ngram3_sim = comparator.calculate_ngram_similarity(gpu1, gpu2, 3)
        ngram5_sim = comparator.calculate_ngram_similarity(gpu1, gpu2, 5)
        penalty = comparator.calculate_penalty(features1, features2)
        
        # –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        hybrid_sim = comparator.enhanced_similarity(gpu1, gpu2, semantic_sim)
        
        print(f"\n   üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ö–æ–¥—Å—Ç–≤–∞:")
        print(f"      ‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ (25%): {semantic_sim:.3f}")
        print(f"      ‚Ä¢ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (40%): {feature_sim:.3f}")
        print(f"      ‚Ä¢ N-–≥—Ä–∞–º–º-3 (15%): {ngram3_sim:.3f}")
        print(f"      ‚Ä¢ N-–≥—Ä–∞–º–º-5 (10%): {ngram5_sim:.3f}")
        print(f"      ‚Ä¢ –®—Ç—Ä–∞—Ñ: {penalty:.3f}")
        print(f"      ‚Ä¢ üéØ –ò–¢–û–ì–û–í–û–ï –ì–ò–ë–†–ò–î–ù–û–ï: {hybrid_sim:.3f} ({hybrid_sim*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if i == 1:  # RTX 4090 vs RTX 4090 Ti
            if hybrid_sim < 0.5:
                print("      ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: Ti –≤–µ—Ä—Å–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —à—Ç—Ä–∞—Ñ—É–µ—Ç—Å—è")
            else:
                print("      ‚ùå –û–®–ò–ë–ö–ê: Ti –≤–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ —à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å—Å—è –±–æ–ª—å—à–µ")
        elif i == 2:  # RX 7700 vs RX 7800
            if hybrid_sim < 0.4:
                print("      ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ (7700 vs 7800) –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
            else:
                print("      ‚ùå –û–®–ò–ë–ö–ê: –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω—ã —à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å—Å—è")
        elif i == 3:  # GTX 1660 Ti vs Super
            if hybrid_sim < 0.5:
                print("      ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: Ti vs Super –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")
            else:
                print("      ‚ùå –û–®–ò–ë–ö–ê: Ti vs Super –¥–æ–ª–∂–Ω—ã —à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å—Å—è")
        elif i == 4:  # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
            if hybrid_sim > 0.9:
                print("      ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ")
            else:
                print("      ‚ùå –û–®–ò–ë–ö–ê: –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ")
        elif i == 5:  # –†–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
            if hybrid_sim < 0.3:
                print("      ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –†–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —à—Ç—Ä–∞—Ñ—É—é—Ç—Å—è")
            else:
                print("      ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –†–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –º–æ–≥—É—Ç —à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å—Å—è —Å–∏–ª—å–Ω–µ–µ")
        
        all_results.append((gpu1, gpu2, hybrid_sim, feature_sim, semantic_sim))
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*80)
    print("üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    avg_hybrid = sum(r[2] for r in all_results) / len(all_results)
    avg_features = sum(r[3] for r in all_results) / len(all_results)
    avg_semantic = sum(r[4] for r in all_results) / len(all_results)
    
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {avg_hybrid:.3f}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {avg_features:.3f}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {avg_semantic:.3f}")
    
    return True

def test_patriot_memory_hybrid():
    """–¢–µ—Å—Ç —Å –ø–∞–º—è—Ç—å—é Patriot –Ω–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–º –∞–ª–≥–æ—Ä–∏—Ç–º–µ"""
    print("\n" + "="*80)
    print("=== –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ Patriot (–≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º) ===\n")
    
    comparator = ProductComparator()
    
    if not comparator.embeddings:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
        return False
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dns_name = "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Patriot Signature [PSD48G240081] 8 –ì–ë"
    citi_name = "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Patriot Signature PSD48G266681 DDR4 - 1x 8–ì–ë 2666–ú–ì—Ü, DIMM, Ret"
    
    print("DNS:", dns_name)
    print("Citilink:", citi_name)
    
    print("\n" + "-"*60)
    print("–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    features1 = comparator.extract_detailed_features(dns_name)
    features2 = comparator.extract_detailed_features(citi_name)
    
    print(f"\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print(f"DNS: {features1}")
    print(f"Citilink: {features2}")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    print(f"\n‚öñÔ∏è  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:")
    key_features = ['brand', 'max_memory', 'memory_type', 'serials']
    for feature in key_features:
        val1 = features1.get(feature, '‚Äî')
        val2 = features2.get(feature, '‚Äî')
        match = "‚úÖ" if val1 == val2 else "‚ùå"
        print(f"   {match} {feature}: {val1} ‚Üî {val2}")
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    try:
        embeddings1 = comparator.get_embeddings([dns_name])
        embeddings2 = comparator.get_embeddings([citi_name])
        semantic_sim = comparator.cosine_similarity(embeddings1[0], embeddings2[0])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        semantic_sim = 0.0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    feature_sim = comparator.calculate_feature_similarity(features1, features2)
    ngram3_sim = comparator.calculate_ngram_similarity(dns_name, citi_name, 3)
    ngram5_sim = comparator.calculate_ngram_similarity(dns_name, citi_name, 5)
    penalty = comparator.calculate_penalty(features1, features2)
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    hybrid_sim = comparator.enhanced_similarity(dns_name, citi_name, semantic_sim)
    
    print(f"\nüìä –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ö–æ–¥—Å—Ç–≤–∞:")
    print(f"   ‚Ä¢ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ (25%): {semantic_sim:.3f}")
    print(f"   ‚Ä¢ –°—Ö–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (40%): {feature_sim:.3f}")
    print(f"   ‚Ä¢ N-–≥—Ä–∞–º–º —Å—Ö–æ–¥—Å—Ç–≤–æ (3): {ngram3_sim:.3f}")
    print(f"   ‚Ä¢ N-–≥—Ä–∞–º–º —Å—Ö–æ–¥—Å—Ç–≤–æ (5): {ngram5_sim:.3f}")
    print(f"   ‚Ä¢ –®—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–ª–∏—á–∏—è: {penalty:.3f}")
    print(f"   ‚Ä¢ üéØ –ò–¢–û–ì–û–í–û–ï –ì–ò–ë–†–ò–î–ù–û–ï –°–•–û–î–°–¢–í–û: {hybrid_sim:.3f} ({hybrid_sim*100:.1f}%)")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —á–∏—Å—Ç–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥—Ö–æ–¥–æ–º
    print(f"\nüîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–æ–≤:")
    print(f"   –¢–æ–ª—å–∫–æ —Å–µ–º–∞–Ω—Ç–∏–∫–∞: {semantic_sim:.3f} ({semantic_sim*100:.1f}%)")
    print(f"   –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥: {hybrid_sim:.3f} ({hybrid_sim*100:.1f}%)")
    
    improvement = hybrid_sim - semantic_sim
    if improvement > 0:
        print(f"   ‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ: +{improvement:.3f} (+{improvement*100:.1f}%)")
    elif improvement < 0:
        print(f"   ‚ö†Ô∏è  –°–Ω–∏–∂–µ–Ω–∏–µ: {improvement:.3f} ({improvement*100:.1f}%)")
    else:
        print(f"   ‚û°Ô∏è  –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    print(f"\nüéØ –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏:")
    thresholds = [0.3, 0.4, 0.5, 0.6, 0.7, 0.8]
    for threshold in thresholds:
        matches = comparator.find_best_matches([dns_name], [citi_name], threshold, use_enhanced=True)
        status = "‚úÖ –ù–ê–ô–î–ï–ù–û" if matches else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û"
        print(f"   –ü–æ—Ä–æ–≥ {threshold}: {status}")
    
    return hybrid_sim > 0.5  # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞–π–¥–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ

def test_cpu_model_differences():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–∏–π –≤ –º–æ–¥–µ–ª—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
    print("\n" + "="*80)
    print("=== –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–∏–π –≤ –º–æ–¥–µ–ª—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ ===\n")
    
    comparator = ProductComparator()
    
    if not comparator.embeddings:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
        return False
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    cpu_tests = [
        ("Intel Core i5-12400F", "Intel Core i5-12600K"),    # 12400 vs 12600 (—Ä–∞–∑–Ω–∏—Ü–∞ 200)
        ("AMD Ryzen 5 5600X", "AMD Ryzen 5 5700X"),         # 5600 vs 5700 (—Ä–∞–∑–Ω–∏—Ü–∞ 100)
        ("Intel Core i7-13700K", "Intel Core i7-13700F"),   # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, —Ä–∞–∑–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
        ("AMD Ryzen 7 7700X", "AMD Ryzen 7 7800X3D"),       # –ë–ª–∏–∑–∫–∏–µ –º–æ–¥–µ–ª–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—É—Ñ—Ñ–∏–∫—Å–∞–º–∏
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–∏–π –≤ –º–æ–¥–µ–ª—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:")
    
    for i, (cpu1, cpu2) in enumerate(cpu_tests, 1):
        print(f"\n{i}. {cpu1} vs {cpu2}")
        print("-" * 60)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        features1 = comparator.extract_detailed_features(cpu1)
        features2 = comparator.extract_detailed_features(cpu2)
        
        print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 1: {features1}")
        print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 2: {features2}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        if 'cpu_model' in features1 and 'cpu_model' in features2:
            import re
            try:
                num1 = int(re.findall(r'\d+', features1['cpu_model'])[0])
                num2 = int(re.findall(r'\d+', features2['cpu_model'])[0])
                diff = abs(num1 - num2)
                print(f"   üìä –†–∞–∑–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π: {diff}")
            except:
                print("   ‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—ã–µ –º–æ–¥–µ–ª–∏")
                diff = 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≥–∏–±—Ä–∏–¥–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
        try:
            embeddings1 = comparator.get_embeddings([cpu1])
            embeddings2 = comparator.get_embeddings([cpu2])
            semantic_sim = comparator.cosine_similarity(embeddings1[0], embeddings2[0])
            hybrid_sim = comparator.enhanced_similarity(cpu1, cpu2, semantic_sim)
            
            print(f"   üî¨ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {semantic_sim:.3f}")
            print(f"   üéØ –ì–∏–±—Ä–∏–¥–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {hybrid_sim:.3f} ({hybrid_sim*100:.1f}%)")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if diff > 100 and hybrid_sim > 0.6:
                print("   ‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π, –Ω–æ –≤—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ")
            elif diff <= 50 and hybrid_sim > 0.7:
                print("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ë–ª–∏–∑–∫–∏–µ –º–æ–¥–µ–ª–∏ –∏–º–µ—é—Ç –≤—ã—Å–æ–∫–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ")
            elif diff > 100 and hybrid_sim < 0.5:
                print("   ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —à—Ç—Ä–∞—Ñ—É—é—Ç—Å—è")
            else:
                print("   ‚ÑπÔ∏è  –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {e}")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ ProductComparator")
    print("üß† –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ (25%) + üîç –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (40%) + üìù N-–≥—Ä–∞–º–º—ã (35%)")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_result = test_hybrid_gpu_comparison()
    test2_result = test_patriot_memory_hybrid()
    test3_result = test_cpu_model_differences()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ì–ò–ë–†–ò–î–ù–û–ì–û –ü–û–î–•–û–î–ê")
    print("="*80)
    print(f"–¢–µ—Å—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:         {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ Patriot:    {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"–¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:       {'‚úÖ –ü–†–û–ô–î–ï–ù' if test3_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    
    if test1_result and test2_result and test3_result:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
        print("   ‚Ä¢ üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –æ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤")
        print("   ‚Ä¢ üîç –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–º–æ–¥–µ–ª–∏, –≤–∞—Ä–∏–∞–Ω—Ç—ã)")
        print("   ‚Ä¢ üìù N-–≥—Ä–∞–º–º—ã –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞")
        print("   ‚Ä¢ ‚öñÔ∏è  –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
        print("   ‚Ä¢ üö´ –°—Ç—Ä–æ–≥–∏–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è")
        print("\n‚ö†Ô∏è  –í–∞–∂–Ω–æ: 7700 vs 7800, Ti vs –±–µ–∑ Ti —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —à—Ç—Ä–∞—Ñ—É—é—Ç—Å—è!")
        print("üí™ –ü—Ä–∏ —ç—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤!")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    return test1_result and test2_result and test3_result

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 