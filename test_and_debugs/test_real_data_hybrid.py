#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ñ–∞–π–ª–æ–≤
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.abspath('.'))

from app.utils.product_comparator import ProductComparator

def test_real_memory_comparison():
    """–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    print("=== –¢–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ ===\n")
    print("üß† –ê–ª–≥–æ—Ä–∏—Ç–º: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ (25%) + –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (40%) + N-–≥—Ä–∞–º–º—ã (35%)")
    
    comparator = ProductComparator()
    
    if not comparator.embeddings:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
        return False
    
    # –ü—É—Ç–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º
    dns_path = 'app/utils/DNS_parsing/categories/product_data_–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å DIMM.json'
    citi_path = 'app/utils/Citi_parser/data/moduli-pamyati/–¢–æ–≤–∞—Ä—ã.json'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(dns_path):
        print(f"‚ùå –§–∞–π–ª DNS –Ω–µ –Ω–∞–π–¥–µ–Ω: {dns_path}")
        return False
    
    if not os.path.exists(citi_path):
        print(f"‚ùå –§–∞–π–ª Citilink –Ω–µ –Ω–∞–π–¥–µ–Ω: {citi_path}")
        return False
    
    print(f"‚úÖ –§–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã:")
    print(f"   DNS: {dns_path}")
    print(f"   Citilink: {citi_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    dns_data = comparator.load_json_data(dns_path)
    citi_data = comparator.load_json_data(citi_path)
    
    if not dns_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ DNS")
        return False
    
    if not citi_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Citilink")
        return False
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ:")
    print(f"   DNS —Ç–æ–≤–∞—Ä–æ–≤: {len(dns_data)}")
    print(f"   Citilink —Ç–æ–≤–∞—Ä–æ–≤: {len(citi_data)}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    dns_names = comparator.extract_names(dns_data, "name")
    citi_names = comparator.extract_names(citi_data, "name")
    
    print(f"   DNS –Ω–∞–∑–≤–∞–Ω–∏–π: {len(dns_names)}")
    print(f"   Citilink –Ω–∞–∑–≤–∞–Ω–∏–π: {len(citi_names)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏...")
    thresholds = [0.3, 0.4, 0.5, 0.6, 0.7]
    
    for threshold in thresholds:
        print(f"\nüéØ –ü–æ—Ä–æ–≥ {threshold}:")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 50 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        test_dns_names = dns_names[:50]
        test_citi_names = citi_names[:100]
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            matches = comparator.find_best_matches(
                test_dns_names, test_citi_names,
                threshold=threshold,
                use_enhanced=True
            )
            
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if matches:
                print(f"   üìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
                for i, (dns_name, citi_name, similarity) in enumerate(matches[:3], 1):
                    print(f"      {i}. –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.3f} ({similarity*100:.1f}%)")
                    print(f"         DNS: {dns_name[:80]}...")
                    print(f"         Citi: {citi_name[:80]}...")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    if i == 1:
                        features1 = comparator.extract_detailed_features(dns_name)
                        features2 = comparator.extract_detailed_features(citi_name)
                        print(f"         üîç –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ DNS: {features1}")
                        print(f"         üîç –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ Citi: {features2}")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return True

def test_patriot_search():
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–∞–º—è—Ç–∏ Patriot"""
    print("\n" + "="*80)
    print("=== –ü–æ–∏—Å–∫ –ø–∞–º—è—Ç–∏ Patriot –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===\n")
    
    comparator = ProductComparator()
    
    if not comparator.embeddings:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
        return False
    
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    dns_path = 'app/utils/DNS_parsing/categories/product_data_–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å DIMM.json'
    citi_path = 'app/utils/Citi_parser/data/moduli-pamyati/–¢–æ–≤–∞—Ä—ã.json'
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    dns_data = comparator.load_json_data(dns_path)
    citi_data = comparator.load_json_data(citi_path)
    
    if not dns_data or not citi_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return False
    
    # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã Patriot
    dns_patriot = [item['name'] for item in dns_data if 'patriot' in item['name'].lower()]
    citi_patriot = [item['name'] for item in citi_data if 'patriot' in item['name'].lower()]
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ Patriot:")
    print(f"   DNS: {len(dns_patriot)}")
    print(f"   Citilink: {len(citi_patriot)}")
    
    if dns_patriot:
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã DNS Patriot:")
        for i, name in enumerate(dns_patriot[:3], 1):
            print(f"   {i}. {name}")
    
    if citi_patriot:
        print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã Citilink Patriot:")
        for i, name in enumerate(citi_patriot[:3], 1):
            print(f"   {i}. {name}")
    
    # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    if dns_patriot and citi_patriot:
        print(f"\nüîÑ –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å—Ä–µ–¥–∏ —Ç–æ–≤–∞—Ä–æ–≤ Patriot...")
        
        try:
            matches = comparator.find_best_matches(
                dns_patriot[:10], citi_patriot[:10],
                threshold=0.5,
                use_enhanced=True
            )
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
            
            for i, (dns_name, citi_name, similarity) in enumerate(matches, 1):
                print(f"\n{i}. –°—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.3f} ({similarity*100:.1f}%)")
                print(f"   DNS: {dns_name}")
                print(f"   Citi: {citi_name}")
                
                # –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
                features1 = comparator.extract_detailed_features(dns_name)
                features2 = comparator.extract_detailed_features(citi_name)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                common_features = set(features1.keys()) & set(features2.keys())
                if common_features:
                    print(f"   üìä –û–±—â–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
                    for feature in common_features:
                        val1 = features1[feature]
                        val2 = features2[feature]
                        match = "‚úÖ" if val1 == val2 else "‚ùå"
                        print(f"      {match} {feature}: {val1} ‚Üî {val2}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_result = test_real_memory_comparison()
    test2_result = test_patriot_search()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    print(f"–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:   {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"–ü–æ–∏—Å–∫ Patriot:              {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    
    if test1_result and test2_result:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("üí° –ì–∏–±—Ä–∏–¥–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
        print("\nüîß –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç:")
        print("   ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö DNS –∏ Citilink")
        print("   ‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫")
        print("   ‚Ä¢ –®—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è (Ti vs –±–µ–∑ Ti, —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏)")
        print("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã.")
    
    return test1_result and test2_result

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 