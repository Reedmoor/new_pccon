#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SimpleProductComparator (–±–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π)
"""

import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, os.path.abspath('.'))

from app.utils.simple_comparator import SimpleProductComparator

def test_simple_gpu_comparison():
    """–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç —Å –ø—Ä–æ—Å—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º"""
    print("=== –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ–∫–∞—Ä—Ç ===\n")
    
    comparator = SimpleProductComparator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ –º–æ–¥–µ–ª—è—Ö
    gpu_names1 = [
        "NVIDIA GeForce RTX 4090 24GB GDDR6X",
        "AMD Radeon RX 7700 XT 12GB GDDR6", 
        "NVIDIA GeForce GTX 1660 Ti 6GB GDDR6",
        "Intel Arc A770 16GB GDDR6"
    ]
    
    gpu_names2 = [
        "NVIDIA GeForce RTX 4090 Ti 24GB GDDR6X",  # Ti –≤–µ—Ä—Å–∏—è - –¥–æ–ª–∂–µ–Ω —à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å—Å—è
        "AMD Radeon RX 7800 XT 16GB GDDR6",        # –î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å - —à—Ç—Ä–∞—Ñ
        "NVIDIA GeForce GTX 1660 Super 6GB GDDR6", # Super –≤–º–µ—Å—Ç–æ Ti - —à—Ç—Ä–∞—Ñ
        "Intel Arc A750 8GB GDDR6"                 # –î—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å - —à—Ç—Ä–∞—Ñ
    ]
    
    print("–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –≥—Ä—É–ø–ø–∞ 1:")
    for i, name in enumerate(gpu_names1, 1):
        print(f"{i}. {name}")
    
    print("\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –≥—Ä—É–ø–ø–∞ 2:")
    for i, name in enumerate(gpu_names2, 1):
        print(f"{i}. {name}")
    
    print("\n" + "="*80)
    print("–ê–Ω–∞–ª–∏–∑ —Å –ø—Ä–æ—Å—Ç—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º (–±–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π)...")
    
    matches = comparator.find_simple_matches(gpu_names1, gpu_names2, threshold=0.3)
    
    if matches:
        print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:")
        for i, (name1, name2, similarity, details) in enumerate(matches, 1):
            print(f"\n{i}. –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ: {similarity:.4f} ({similarity*100:.1f}%)")
            print(f"   –ì—Ä—É–ø–ø–∞ 1: {name1}")
            print(f"   –ì—Ä—É–ø–ø–∞ 2: {name2}")
            print(f"   üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:")
            print(f"      ‚Ä¢ –°—Ö–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {details['feature_similarity']:.3f}")
            print(f"      ‚Ä¢ N-–≥—Ä–∞–º–º —Å—Ö–æ–¥—Å—Ç–≤–æ (3): {details['ngram3_similarity']:.3f}")
            print(f"      ‚Ä¢ N-–≥—Ä–∞–º–º —Å—Ö–æ–¥—Å—Ç–≤–æ (5): {details['ngram5_similarity']:.3f}")
            print(f"      ‚Ä¢ –®—Ç—Ä–∞—Ñ: {details['penalty']:.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            features1 = details['features1']
            features2 = details['features2']
            
            if features1 or features2:
                print(f"   üîç –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
                for key in set(features1.keys()) | set(features2.keys()):
                    val1 = features1.get(key, '‚Äî')
                    val2 = features2.get(key, '‚Äî')
                    match_symbol = "‚úÖ" if val1 == val2 else "‚ùå"
                    print(f"      {match_symbol} {key}: {val1} ‚Üî {val2}")
                    
                    # –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Ä–∞–∑–ª–∏—á–∏—è–º –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö GPU
                    if key == 'gpu_variant' and val1 != val2:
                        print(f"         ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã GPU!")
                    elif key == 'gpu_model' and val1 != val2:
                        print(f"         ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ GPU!")
    else:
        print("\n‚ùå –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    return len(matches) > 0

def test_patriot_memory_detailed():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å –ø–∞–º—è—Ç—å—é Patriot"""
    print("\n" + "="*80)
    print("=== –î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏ Patriot ===\n")
    
    comparator = SimpleProductComparator()
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dns_names = [
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Patriot Signature [PSD48G240081] 8 –ì–ë"
    ]
    
    citi_names = [
        "–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å Patriot Signature PSD48G266681 DDR4 - 1x 8–ì–ë 2666–ú–ì—Ü, DIMM, Ret"
    ]
    
    print("DNS:", dns_names[0])
    print("Citilink:", citi_names[0])
    
    print("\n" + "-"*60)
    print("–ü–æ—à–∞–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    features1 = comparator.extract_detailed_features(dns_names[0])
    features2 = comparator.extract_detailed_features(citi_names[0])
    
    print(f"\nüîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print(f"DNS: {features1}")
    print(f"Citilink: {features2}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ö–æ–¥—Å—Ç–≤–∞
    feature_sim = comparator.calculate_feature_similarity(features1, features2)
    ngram3_sim = comparator.calculate_ngram_similarity(dns_names[0], citi_names[0], 3)
    ngram5_sim = comparator.calculate_ngram_similarity(dns_names[0], citi_names[0], 5)
    penalty = comparator.calculate_penalty(features1, features2)
    
    print(f"\nüìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ö–æ–¥—Å—Ç–≤–∞:")
    print(f"   ‚Ä¢ –°—Ö–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {feature_sim:.3f}")
    print(f"   ‚Ä¢ N-–≥—Ä–∞–º–º —Å—Ö–æ–¥—Å—Ç–≤–æ (3): {ngram3_sim:.3f}")
    print(f"   ‚Ä¢ N-–≥—Ä–∞–º–º —Å—Ö–æ–¥—Å—Ç–≤–æ (5): {ngram5_sim:.3f}")
    print(f"   ‚Ä¢ –®—Ç—Ä–∞—Ñ: {penalty:.3f}")
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ
    total_similarity = comparator.simple_similarity(dns_names[0], citi_names[0])
    print(f"   ‚Ä¢ –ò–¢–û–ì–û–í–û–ï –°–•–û–î–°–¢–í–û: {total_similarity:.3f} ({total_similarity*100:.1f}%)")
    
    # –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏
    print(f"\nüéØ –¢–µ—Å—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏:")
    thresholds = [0.3, 0.4, 0.5, 0.6]
    for threshold in thresholds:
        matches = comparator.find_simple_matches(dns_names, citi_names, threshold)
        status = "‚úÖ –ù–ê–ô–î–ï–ù–û" if matches else "‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û"
        print(f"   –ü–æ—Ä–æ–≥ {threshold}: {status}")
    
    return total_similarity > 0.3

def test_cpu_models():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–∏–π –≤ –º–æ–¥–µ–ª—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
    print("\n" + "="*80)
    print("=== –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–∏–π –≤ –º–æ–¥–µ–ª—è—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ ===\n")
    
    comparator = SimpleProductComparator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ —Å –±–ª–∏–∑–∫–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
    cpu_tests = [
        ("Intel Core i5-12400F", "Intel Core i5-12600K"),  # 12400 vs 12600 - —Ä–∞–∑–Ω–∏—Ü–∞ 200
        ("AMD Ryzen 5 5600X", "AMD Ryzen 5 5700X"),       # 5600 vs 5700 - —Ä–∞–∑–Ω–∏—Ü–∞ 100  
        ("Intel Core i7-13700K", "Intel Core i7-13700F"), # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏, —Ä–∞–∑–Ω—ã–µ —Å—É—Ñ—Ñ–∏–∫—Å—ã
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–∏–∑–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤:")
    
    for i, (cpu1, cpu2) in enumerate(cpu_tests, 1):
        print(f"\n{i}. {cpu1} vs {cpu2}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        features1 = comparator.extract_detailed_features(cpu1)
        features2 = comparator.extract_detailed_features(cpu2)
        
        print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 1: {features1}")
        print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ 2: {features2}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
        similarity = comparator.simple_similarity(cpu1, cpu2)
        feature_sim = comparator.calculate_feature_similarity(features1, features2)
        penalty = comparator.calculate_penalty(features1, features2)
        
        print(f"   –°—Ö–æ–¥—Å—Ç–≤–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: {feature_sim:.3f}")
        print(f"   –®—Ç—Ä–∞—Ñ: {penalty:.3f}")
        print(f"   –ò–¢–û–ì–û–í–û–ï –°–•–û–î–°–¢–í–û: {similarity:.3f} ({similarity*100:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        if 'cpu_model' in features1 and 'cpu_model' in features2:
            import re
            try:
                num1 = int(re.findall(r'\d+', features1['cpu_model'])[0])
                num2 = int(re.findall(r'\d+', features2['cpu_model'])[0])
                diff = abs(num1 - num2)
                print(f"   –†–∞–∑–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π: {diff}")
                
                if diff > 100:
                    print("   ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°—É—â–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –º–æ–¥–µ–ª—è—Ö!")
                elif diff > 50:
                    print("   ‚ö†Ô∏è  –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å –≤ –º–æ–¥–µ–ª—è—Ö")
                else:
                    print("   ‚úÖ –ë–ª–∏–∑–∫–∏–µ –º–æ–¥–µ–ª–∏")
            except:
                print("   ‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–∏—Å–ª–æ–≤—ã–µ –º–æ–¥–µ–ª–∏")
    
    return True

def test_brand_differences():
    """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–∏–π –≤ –±—Ä–µ–Ω–¥–∞—Ö"""
    print("\n" + "="*80)
    print("=== –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–∏–π –≤ –±—Ä–µ–Ω–¥–∞—Ö ===\n")
    
    comparator = SimpleProductComparator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –±—Ä–µ–Ω–¥–∞–º–∏
    brand_tests = [
        ("NVIDIA GeForce RTX 4090", "AMD Radeon RX 7900 XTX"),  # –†–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã
        ("Kingston HyperX 16GB", "Corsair Vengeance 16GB"),     # –†–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã –ø–∞–º—è—Ç–∏
        ("Intel Core i7-13700K", "AMD Ryzen 7 7700X"),         # –†–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã CPU
    ]
    
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –±—Ä–µ–Ω–¥–æ–≤:")
    
    for i, (product1, product2) in enumerate(brand_tests, 1):
        print(f"\n{i}. {product1} vs {product2}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        features1 = comparator.extract_detailed_features(product1)
        features2 = comparator.extract_detailed_features(product2)
        
        brand1 = features1.get('brand', '‚Äî')
        brand2 = features2.get('brand', '‚Äî')
        
        print(f"   –ë—Ä–µ–Ω–¥ 1: {brand1}")
        print(f"   –ë—Ä–µ–Ω–¥ 2: {brand2}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ –∏ —à—Ç—Ä–∞—Ñ
        similarity = comparator.simple_similarity(product1, product2)
        penalty = comparator.calculate_penalty(features1, features2)
        
        print(f"   –®—Ç—Ä–∞—Ñ: {penalty:.3f}")
        print(f"   –ò–¢–û–ì–û–í–û–ï –°–•–û–î–°–¢–í–û: {similarity:.3f} ({similarity*100:.1f}%)")
        
        if brand1 != brand2 and brand1 != '‚Äî' and brand2 != '‚Äî':
            print("   ‚ùå –†–∞–∑–Ω—ã–µ –±—Ä–µ–Ω–¥—ã - –æ–∂–∏–¥–∞–µ—Ç—Å—è —à—Ç—Ä–∞—Ñ!")
        else:
            print("   ‚úÖ –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∏–ª–∏ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±—Ä–µ–Ω–¥—ã")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SimpleProductComparator")
    print("üí° –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ë–ï–ó –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π - —Ç–æ–ª—å–∫–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏ N-–≥—Ä–∞–º–º—ã")
    print("=" * 80)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    test1_result = test_simple_gpu_comparison()
    test2_result = test_patriot_memory_detailed()
    test3_result = test_cpu_models()
    test4_result = test_brand_differences()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "="*80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    print(f"–¢–µ—Å—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:         {'‚úÖ –ü–†–û–ô–î–ï–ù' if test1_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ Patriot:    {'‚úÖ –ü–†–û–ô–î–ï–ù' if test2_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π CPU:       {'‚úÖ –ü–†–û–ô–î–ï–ù' if test3_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    print(f"–¢–µ—Å—Ç –±—Ä–µ–Ω–¥–æ–≤:           {'‚úÖ –ü–†–û–ô–î–ï–ù' if test4_result else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
    
    if test1_result and test2_result and test3_result and test4_result:
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        print("\nüí° –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ ‚ùå –ù–ï–¢ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π - –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ")
        print("   ‚Ä¢ ‚úÖ –¢–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ (–º–æ–¥–µ–ª–∏, –≤–∞—Ä–∏–∞–Ω—Ç—ã, –æ–±—ä–µ–º—ã)")
        print("   ‚Ä¢ ‚úÖ N-–≥—Ä–∞–º–º—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
        print("   ‚Ä¢ ‚úÖ –°—Ç—Ä–æ–≥–∏–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–ª–∏—á–∏—è")
        print("   ‚Ä¢ ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–∏–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤")
        print("   ‚Ä¢ ‚úÖ –í–∑–≤–µ—à–µ–Ω–Ω–æ–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫")
        print("\n‚ö†Ô∏è  –í–∞–∂–Ω–æ: 7700 vs 7800, Ti vs –±–µ–∑ Ti —Ç–µ–ø–µ—Ä—å —à—Ç—Ä–∞—Ñ—É—é—Ç—Å—è!")
    else:
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.")
    
    return test1_result and test2_result and test3_result and test4_result

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 